Dashboards:
  (Azure) Function App:
    dashboard_group: Azure Functions
    view_support: instance
    importQualifiers: FunctionExecutionCount (resource_type =  Microsoft.Web/sites)
      & (is_Azure_Function =  true) & (primary_aggregation_type =  true);  OR FunctionExecutionUnits
      (resource_type =  Microsoft.Web/sites) & (is_Azure_Function =  true) & (primary_aggregation_type
      =  true);  OR azure.function.invocations (is_Azure_Function =  true) & (metric_source
      =  azure_function_wrapper);
  (Azure) Function Apps:
    dashboard_group: Azure Functions
    view_support: aggregated
    importQualifiers: FunctionExecutionCount (resource_type =  Microsoft.Web/sites)
      & (is_Azure_Function =  true) & (primary_aggregation_type =  true);  OR FunctionExecutionUnits
      (resource_type =  Microsoft.Web/sites) & (is_Azure_Function =  true) & (primary_aggregation_type
      =  true);  OR azure.function.invocations (is_Azure_Function =  true) & (metric_source
      =  azure_function_wrapper);
  (SignalFx) Azure Function (deprecated):
    dashboard_group: Azure Functions
    view_support: instance
    importQualifiers: FunctionExecutionCount (resource_type =  Microsoft.Web/sites)
      & (is_Azure_Function =  true) & (primary_aggregation_type =  true);  OR FunctionExecutionUnits
      (resource_type =  Microsoft.Web/sites) & (is_Azure_Function =  true) & (primary_aggregation_type
      =  true);  OR azure.function.invocations (is_Azure_Function =  true) & (metric_source
      =  azure_function_wrapper);
  (SignalFx) Azure Functions (deprecated):
    dashboard_group: Azure Functions
    view_support: aggregated
    importQualifiers: FunctionExecutionCount (resource_type =  Microsoft.Web/sites)
      & (is_Azure_Function =  true) & (primary_aggregation_type =  true);  OR FunctionExecutionUnits
      (resource_type =  Microsoft.Web/sites) & (is_Azure_Function =  true) & (primary_aggregation_type
      =  true);  OR azure.function.invocations (is_Azure_Function =  true) & (metric_source
      =  azure_function_wrapper);
  .NET runtime metrics:
    dashboard_group: APM .NET services
    view_support: N/A
    importQualifiers: process.runtime.dotnet.gc.heap.size (*);
  1. EC2 cost & usage:
    dashboard_group: AWS optimizer
    view_support: N/A
    importQualifiers: instance.cost (*);
  2. EC2 reservations:
    dashboard_group: AWS optimizer
    view_support: N/A
    importQualifiers: instance.cost (*);
  3. EC2 worksheet:
    dashboard_group: AWS optimizer
    view_support: N/A
    importQualifiers: instance.cost (*);
  API Gateway logs:
    dashboard_group: AWS API Gateway
    view_support: N/A
    importQualifiers: Count (namespace =  AWS/ApiGateway);  OR Latency (namespace
      =  AWS/ApiGateway);  OR IntegrationLatency (namespace =  AWS/ApiGateway);  OR
      4XXError (namespace =  AWS/ApiGateway);  OR 5XXError (namespace =  AWS/ApiGateway);  OR
      CacheHitCount (namespace =  AWS/ApiGateway);  OR CacheMissCount (namespace =  AWS/ApiGateway);
  API objects:
    dashboard_group: Kong
    view_support: N/A
    importQualifiers: gauge.kong.database.reachable (plugin =  kong);
  API resource:
    dashboard_group: AWS API Gateway
    view_support: N/A
    importQualifiers: Count (namespace =  AWS/ApiGateway);  OR Latency (namespace
      =  AWS/ApiGateway);  OR IntegrationLatency (namespace =  AWS/ApiGateway);  OR
      4XXError (namespace =  AWS/ApiGateway);  OR 5XXError (namespace =  AWS/ApiGateway);  OR
      CacheHitCount (namespace =  AWS/ApiGateway);  OR CacheMissCount (namespace =  AWS/ApiGateway);
  API test:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  API test org:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  APM / IMM:
    dashboard_group: Executive Level
    view_support: N/A
    importQualifiers: service.request.count (sf_environment =  *) & (sf_service =  *);  OR
      sf.org.numLogsReceivedByToken (*);  OR rum.page_view.count (*);  OR rum.page_view.count
      (sf_ua_browsername =  *);  OR sf.org.apm.numContainers (*);  OR synthetics.run.count
      (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent (test =  *)
      & (location =  *);
  APM entitlements:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  APM throttling:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  AWS ALB instance:
    dashboard_group: AWS ALB
    view_support: instance
    importQualifiers: HealthyHostCount (namespace =  AWS/ApplicationELB) & (stat =  count)
      & (LoadBalancer =  *);
  AWS ALB instances:
    dashboard_group: AWS ALB
    view_support: aggregated
    importQualifiers: HealthyHostCount (namespace =  AWS/ApplicationELB) & (stat =  count)
      & (LoadBalancer =  *);
  AWS ALB logs:
    dashboard_group: AWS ALB
    view_support: N/A
    importQualifiers: HealthyHostCount (namespace =  AWS/ApplicationELB) & (stat =  count)
      & (LoadBalancer =  *);
  AWS AutoScaling group:
    dashboard_group: AWS AutoScaling
    view_support: instance
    importQualifiers: GroupTotalInstances (namespace =  AWS/AutoScaling) & (stat =  count)
      & (AutoScalingGroupName =  *);
  AWS AutoScaling groups:
    dashboard_group: AWS AutoScaling
    view_support: aggregated
    importQualifiers: GroupTotalInstances (namespace =  AWS/AutoScaling) & (stat =  count)
      & (AutoScalingGroupName =  *);
  AWS DynamoDB:
    dashboard_group: AWS DynamoDB
    view_support: aggregated
    importQualifiers: SuccessfulRequestLatency (namespace =  AWS/DynamoDB) & (stat
      =  mean);
  AWS EC2 logs:
    dashboard_group: AWS EC2
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/EC2) & (stat =  mean) & (InstanceId
      =  *);  OR system.memory.usage (cloud.provider =  aws);
  AWS Gateway LB instance:
    dashboard_group: AWS Gateway LB
    view_support: N/A
    importQualifiers: ConsumedLCUs (namespace =  AWS/GatewayELB) & (stat =  sum);
  AWS Gateway LB instances:
    dashboard_group: AWS Gateway LB
    view_support: N/A
    importQualifiers: ConsumedLCUs (namespace =  AWS/GatewayELB) & (stat =  sum);
  AWS NLB instance:
    dashboard_group: AWS NLB
    view_support: N/A
    importQualifiers: ActiveFlowCount (namespace =  AWS/NetworkELB) & (stat =  mean);
  AWS NLB instances:
    dashboard_group: AWS NLB
    view_support: N/A
    importQualifiers: ActiveFlowCount (namespace =  AWS/NetworkELB) & (stat =  mean);
  AWS NLB logs:
    dashboard_group: AWS NLB
    view_support: N/A
    importQualifiers: ActiveFlowCount (namespace =  AWS/NetworkELB) & (stat =  mean);
  AWS Redshift:
    dashboard_group: AWS Redshift
    view_support: instance
    importQualifiers: CPUUtilization (namespace =  AWS/Redshift) & (stat =  mean)
      & (ClusterIdentifier =  *);
  AWS Redshift logs:
    dashboard_group: AWS Redshift
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/Redshift) & (stat =  mean)
      & (ClusterIdentifier =  *);
  AWS Redshift overview:
    dashboard_group: AWS Redshift
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/Redshift) & (stat =  mean)
      & (ClusterIdentifier =  *);
  AWS S3 bucket:
    dashboard_group: AWS S3
    view_support: instance
    importQualifiers: BytesUploaded (namespace =  AWS/S3);  OR BytesDownloaded (namespace
      =  AWS/S3);
  AWS S3 buckets:
    dashboard_group: AWS S3
    view_support: aggregated
    importQualifiers: BytesUploaded (namespace =  AWS/S3);  OR BytesDownloaded (namespace
      =  AWS/S3);
  ActiveMQ host:
    dashboard_group: ActiveMQ
    view_support: N/A
    importQualifiers: gauge.amq.TotalConsumerCount (plugin =  GenericJMX);
  ActiveMQ hosts:
    dashboard_group: ActiveMQ
    view_support: N/A
    importQualifiers: gauge.amq.TotalConsumerCount (plugin =  GenericJMX);
  ActiveMQ message age:
    dashboard_group: ActiveMQ
    view_support: N/A
    importQualifiers: gauge.amq.TotalConsumerCount (plugin =  GenericJMX);
  ActiveMQ queue:
    dashboard_group: ActiveMQ
    view_support: N/A
    importQualifiers: gauge.amq.TotalConsumerCount (plugin =  GenericJMX);
  ActiveMQ topic:
    dashboard_group: ActiveMQ
    view_support: N/A
    importQualifiers: gauge.amq.TotalConsumerCount (plugin =  GenericJMX);
  Amazon MWAA:
    dashboard_group: Amazon MWAA
    view_support: N/A
    importQualifiers: Processes (namespace =  AmazonMWAA) & (stat =  mean);  OR CPUUtilization
      (namespace =  AmazonMWAA) & (stat =  mean);  OR DagBagSize (namespace =  AmazonMWAA);
  Amazon MWAA (Env metrics):
    dashboard_group: Amazon MWAA
    view_support: N/A
    importQualifiers: Processes (namespace =  AmazonMWAA) & (stat =  mean);  OR CPUUtilization
      (namespace =  AmazonMWAA) & (stat =  mean);  OR DagBagSize (namespace =  AmazonMWAA);
  Amazon MWAA overview:
    dashboard_group: Amazon MWAA
    view_support: N/A
    importQualifiers: Processes (namespace =  AmazonMWAA) & (stat =  mean);  OR CPUUtilization
      (namespace =  AmazonMWAA) & (stat =  mean);  OR DagBagSize (namespace =  AmazonMWAA);
  Apache spark application:
    dashboard_group: Apache spark applications
    view_support: N/A
    importQualifiers: gauge.spark.num_running_jobs (plugin =  apache_spark);
  Apache web server:
    dashboard_group: Apache
    view_support: instance
    importQualifiers: apache_bytes (plugin =  apache);
  Apache web server - Apache (OTel):
    dashboard_group: Apache (OTel)
    view_support: instance
    importQualifiers: apache.uptime (host.name =  *);  OR apache.requests (host.name
      =  *);
  Apache web servers:
    dashboard_group: Apache
    view_support: aggregated
    importQualifiers: apache_bytes (plugin =  apache);
  Apache web servers - Apache (OTel):
    dashboard_group: Apache (OTel)
    view_support: aggregated
    importQualifiers: apache.uptime (host.name =  *);  OR apache.requests (host.name
      =  *);
  App Engine HTTP:
    dashboard_group: Google App Engine
    view_support: aggregated
    importQualifiers: flex/cpu/utilization (service =  appengine);  OR flex/cpu/reserved_cores
      (service =  appengine);
  App Engine flex:
    dashboard_group: Google App Engine
    view_support: aggregated
    importQualifiers: flex/cpu/utilization (service =  appengine);  OR flex/cpu/reserved_cores
      (service =  appengine);
  App Engine memcache:
    dashboard_group: Google App Engine
    view_support: aggregated
    importQualifiers: flex/cpu/utilization (service =  appengine);  OR flex/cpu/reserved_cores
      (service =  appengine);
  App Engine system:
    dashboard_group: Google App Engine
    view_support: aggregated
    importQualifiers: flex/cpu/utilization (service =  appengine);  OR flex/cpu/reserved_cores
      (service =  appengine);
  AppDynamics metrics:
    dashboard_group: AppDynamics metrics
    view_support: N/A
    importQualifiers: Used % (metric_source =  AppDynamics);
  Application:
    dashboard_group: Hadoop YARN
    view_support: N/A
    importQualifiers: gauge.hadoop.resource.manager.apps.progress (plugin =  apache_hadoop);  OR
      gauge.hadoop.cluster.metrics.apps_submitted (plugin =  apache_hadoop);
  Application - (i) running jobs:
    dashboard_group: Apache spark applications
    view_support: N/A
    importQualifiers: gauge.spark.num_running_jobs (plugin =  apache_spark);
  Application - (ii) active stages:
    dashboard_group: Apache spark applications
    view_support: N/A
    importQualifiers: gauge.spark.num_running_jobs (plugin =  apache_spark);
  Application - (iii) driver executor:
    dashboard_group: Apache spark applications
    view_support: N/A
    importQualifiers: gauge.spark.num_running_jobs (plugin =  apache_spark);
  Application - (iv) executors:
    dashboard_group: Apache spark applications
    view_support: N/A
    importQualifiers: gauge.spark.num_running_jobs (plugin =  apache_spark);
  Application - (v) streaming statistics:
    dashboard_group: Apache spark applications
    view_support: N/A
    importQualifiers: gauge.spark.num_running_jobs (plugin =  apache_spark);
  Application - Go memory:
    dashboard_group: Go memory
    view_support: N/A
    importQualifiers: memstats.sys (*);  OR memstats.heap_sys (*);  OR memstats.heap_inuse
      (*);
  Applications:
    dashboard_group: Go memory
    view_support: N/A
    importQualifiers: memstats.sys (*);  OR memstats.heap_sys (*);  OR memstats.heap_inuse
      (*);
  Aurora instance:
    dashboard_group: AWS RDS
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/RDS) & (stat =  mean) & (DBInstanceIdentifier
      =  *);
  Aurora instances:
    dashboard_group: AWS RDS
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/RDS) & (stat =  mean) & (DBInstanceIdentifier
      =  *);
  Azure:
    dashboard_group: Cloud integrations usage
    view_support: N/A
    importQualifiers: sf.org.num.azureServiceClientCallCount (*);  OR sf.org.num.gcpServiceClientCallCount
      (*);
  Azure App service:
    dashboard_group: Azure App service
    view_support: instance
    importQualifiers: BytesReceived (resource_type =  Microsoft.Web/sites | microsoft.web/sites)
      & (is_Azure_Function =  false) & (primary_aggregation_type =  true);  OR CpuTime
      (resource_type =  Microsoft.Web/sites | microsoft.web/sites) & (is_Azure_Function
      =  false) & (primary_aggregation_type =  true);
  Azure App services:
    dashboard_group: Azure App service
    view_support: aggregated
    importQualifiers: BytesReceived (resource_type =  Microsoft.Web/sites | microsoft.web/sites)
      & (is_Azure_Function =  false) & (primary_aggregation_type =  true);  OR CpuTime
      (resource_type =  Microsoft.Web/sites | microsoft.web/sites) & (is_Azure_Function
      =  false) & (primary_aggregation_type =  true);
  Azure Event Hub:
    dashboard_group: Azure Event Hubs
    view_support: instance
    importQualifiers: SuccessfulRequests (primary_aggregation_type =  true) & (resource_type
      =  Microsoft.EventHub/namespaces);  OR IncomingRequests (primary_aggregation_type
      =  true) & (resource_type =  Microsoft.EventHub/namespaces);
  Azure Event Hubs:
    dashboard_group: Azure Event Hubs
    view_support: aggregated
    importQualifiers: SuccessfulRequests (primary_aggregation_type =  true) & (resource_type
      =  Microsoft.EventHub/namespaces);  OR IncomingRequests (primary_aggregation_type
      =  true) & (resource_type =  Microsoft.EventHub/namespaces);
  Azure Event Hubs logs:
    dashboard_group: Azure Event Hubs
    view_support: aggregated
    importQualifiers: SuccessfulRequests (primary_aggregation_type =  true) & (resource_type
      =  Microsoft.EventHub/namespaces);  OR IncomingRequests (primary_aggregation_type
      =  true) & (resource_type =  Microsoft.EventHub/namespaces);
  Azure Logic App:
    dashboard_group: Azure Logic Apps
    view_support: instance
    importQualifiers: BillableActionExecutions (resource_type =  Microsoft.Logic/workflows
      | microsoft.logic/workflows) & (primary_aggregation_type =  true);  OR ActionsSucceeded
      (resource_type =  Microsoft.Logic/workflows | microsoft.logic/workflows) & (primary_aggregation_type
      =  true);  OR ActionsFailed (resource_type =  Microsoft.Logic/workflows | microsoft.logic/workflows)
      & (primary_aggregation_type =  true);  OR ActionThrottledEvents (resource_type
      =  Microsoft.Logic/workflows | microsoft.logic/workflows) & (primary_aggregation_type
      =  true);
  Azure Logic Apps:
    dashboard_group: Azure Logic Apps
    view_support: aggregated
    importQualifiers: BillableActionExecutions (resource_type =  Microsoft.Logic/workflows
      | microsoft.logic/workflows) & (primary_aggregation_type =  true);  OR ActionsSucceeded
      (resource_type =  Microsoft.Logic/workflows | microsoft.logic/workflows) & (primary_aggregation_type
      =  true);  OR ActionsFailed (resource_type =  Microsoft.Logic/workflows | microsoft.logic/workflows)
      & (primary_aggregation_type =  true);  OR ActionThrottledEvents (resource_type
      =  Microsoft.Logic/workflows | microsoft.logic/workflows) & (primary_aggregation_type
      =  true);
  Azure Managed Cluster:
    dashboard_group: Azure Kubernetes service
    view_support: N/A
    importQualifiers: kube_node_status_allocatable_cpu_cores (resource_type =  Microsoft.ContainerService/managedClusters);  OR
      kube_node_status_allocatable_memory_bytes (resource_type =  Microsoft.ContainerService/managedClusters);
  Azure SQL database:
    dashboard_group: Azure SQL databases
    view_support: instance
    importQualifiers: dtu_consumption_percent (resource_type =  microsoft.sql/servers/databases
      | Microsoft.Sql/servers/databases) & (primary_aggregation_type =  true);  OR
      storage (resource_type =  microsoft.sql/servers/databases | Microsoft.Sql/servers/databases)
      & (primary_aggregation_type =  true);
  Azure SQL databases:
    dashboard_group: Azure SQL databases
    view_support: aggregated
    importQualifiers: dtu_consumption_percent (resource_type =  microsoft.sql/servers/databases
      | Microsoft.Sql/servers/databases) & (primary_aggregation_type =  true);  OR
      storage (resource_type =  microsoft.sql/servers/databases | Microsoft.Sql/servers/databases)
      & (primary_aggregation_type =  true);
  Azure Storage account:
    dashboard_group: Azure Storage
    view_support: instance
    importQualifiers: Availability (resource_type =  Microsoft.Storage/storageAccounts)
      & (primary_aggregation_type =  true);  OR SuccessE2ELatency (resource_type =  Microsoft.Storage/storageAccounts)
      & (primary_aggregation_type =  true);
  Azure Storage accounts:
    dashboard_group: Azure Storage
    view_support: aggregated
    importQualifiers: Availability (resource_type =  Microsoft.Storage/storageAccounts)
      & (primary_aggregation_type =  true);  OR SuccessE2ELatency (resource_type =  Microsoft.Storage/storageAccounts)
      & (primary_aggregation_type =  true);
  Azure VM Scale Set:
    dashboard_group: Azure VM Scale Sets
    view_support: instance
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets
      | microsoft.compute/virtualmachinescalesets) & (primary_aggregation_type =  true);
  Azure VM Scale Sets:
    dashboard_group: Azure VM Scale Sets
    view_support: aggregated
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets
      | microsoft.compute/virtualmachinescalesets) & (primary_aggregation_type =  true);
  Azure VM Scale Sets logs:
    dashboard_group: Azure VM Scale Sets
    view_support: aggregated
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets
      | microsoft.compute/virtualmachinescalesets) & (primary_aggregation_type =  true);
  Azure Virtual Machine:
    dashboard_group: Azure Virtual Machines
    view_support: instance
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachines)
      & (primary_aggregation_type =  true);  OR Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets/virtualMachines)
      & (primary_aggregation_type =  true);  OR system.memory.usage (cloud.provider
      =  azure);
  Azure Virtual Machine (Azure monitor):
    dashboard_group: Azure Virtual Machines
    view_support: instance
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachines)
      & (primary_aggregation_type =  true);  OR Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets/virtualMachines)
      & (primary_aggregation_type =  true);  OR system.memory.usage (cloud.provider
      =  azure);
  Azure Virtual Machine classic (Azure monitor):
    dashboard_group: Azure Virtual Machines
    view_support: N/A
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachines)
      & (primary_aggregation_type =  true);  OR Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets/virtualMachines)
      & (primary_aggregation_type =  true);  OR system.memory.usage (cloud.provider
      =  azure);
  Azure Virtual Machines:
    dashboard_group: Azure Virtual Machines
    view_support: aggregated
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachines)
      & (primary_aggregation_type =  true);  OR Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets/virtualMachines)
      & (primary_aggregation_type =  true);  OR system.memory.usage (cloud.provider
      =  azure);
  Azure Virtual Machines (Azure monitor):
    dashboard_group: Azure Virtual Machines
    view_support: aggregated
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachines)
      & (primary_aggregation_type =  true);  OR Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets/virtualMachines)
      & (primary_aggregation_type =  true);  OR system.memory.usage (cloud.provider
      =  azure);
  Azure Virtual Machines logs:
    dashboard_group: Azure Virtual Machines
    view_support: aggregated
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachines)
      & (primary_aggregation_type =  true);  OR Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets/virtualMachines)
      & (primary_aggregation_type =  true);  OR system.memory.usage (cloud.provider
      =  azure);
  Azure batch account:
    dashboard_group: Azure batch
    view_support: instance
    importQualifiers: CoreCount (resource_type =  Microsoft.Batch/batchAccounts |
      microsoft.batch/batchaccounts) & (primary_aggregation_type =  true);
  Azure batch account logs:
    dashboard_group: Azure batch
    view_support: aggregated
    importQualifiers: CoreCount (resource_type =  Microsoft.Batch/batchAccounts |
      microsoft.batch/batchaccounts) & (primary_aggregation_type =  true);
  Azure batch accounts:
    dashboard_group: Azure batch
    view_support: aggregated
    importQualifiers: CoreCount (resource_type =  Microsoft.Batch/batchAccounts |
      microsoft.batch/batchaccounts) & (primary_aggregation_type =  true);
  Azure redis cache:
    dashboard_group: Azure redis caches
    view_support: instance
    importQualifiers: totalkeys (primary_aggregation_type =  true) & (resource_type
      =  microsoft.cache/redis | Microsoft.Cache/Redis);  OR totalkeys0 (primary_aggregation_type
      =  true) & (resource_type =  microsoft.cache/redis | Microsoft.Cache/Redis);
  Azure redis caches:
    dashboard_group: Azure redis caches
    view_support: aggregated
    importQualifiers: totalkeys (primary_aggregation_type =  true) & (resource_type
      =  microsoft.cache/redis | Microsoft.Cache/Redis);  OR totalkeys0 (primary_aggregation_type
      =  true) & (resource_type =  microsoft.cache/redis | Microsoft.Cache/Redis);
  Azure/SignalR hub:
    dashboard_group: Azure SignalR hubs
    view_support: N/A
    importQualifiers: ConnectionCount (resource_type =  Microsoft.SignalRService/SignalR);
  Azure/SignalR hubs:
    dashboard_group: Azure SignalR hubs
    view_support: N/A
    importQualifiers: ConnectionCount (resource_type =  Microsoft.SignalRService/SignalR);
  Backend:
    dashboard_group: Traefik
    view_support: instance
    importQualifiers: traefik_entrypoint_requests_total (*);
  Backends:
    dashboard_group: Traefik
    view_support: aggregated
    importQualifiers: traefik_entrypoint_requests_total (*);
  BigQuery:
    dashboard_group: Google cloud BigQuery
    view_support: instance
    importQualifiers: query/count (service =  bigquery) & (project_id =  *);  OR job/num_in_flight
      (service =  bigquery) & (project_id =  *);
  BigQuery overview:
    dashboard_group: Google cloud BigQuery
    view_support: aggregated
    importQualifiers: query/count (service =  bigquery) & (project_id =  *);  OR job/num_in_flight
      (service =  bigquery) & (project_id =  *);
  Bigtable cluster:
    dashboard_group: Google Cloud Bigtable
    view_support: instance
    importQualifiers: cluster/node_count (service =  bigtable);  OR server/latencies
      (service =  bigtable);
  Bigtable overview:
    dashboard_group: Google Cloud Bigtable
    view_support: aggregated
    importQualifiers: cluster/node_count (service =  bigtable);  OR server/latencies
      (service =  bigtable);
  Bigtable table:
    dashboard_group: Google Cloud Bigtable
    view_support: instance
    importQualifiers: cluster/node_count (service =  bigtable);  OR server/latencies
      (service =  bigtable);
  Broker:
    dashboard_group: Kafka (OTeL)
    view_support: instance
    importQualifiers: kafka.brokers (host.name =  *);  OR kafka.topic.partitions (host.name
      =  *) & (topic =  *) & (partition =  *);
  Broker (Default):
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  Broker (PER_BROKER):
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  Broker - Kafka:
    dashboard_group: Kafka
    view_support: instance
    importQualifiers: counter.kafka.produce.total-time.count (plugin =  GenericJMX);
  Brokers:
    dashboard_group: Kafka (OTeL)
    view_support: aggregated
    importQualifiers: kafka.brokers (host.name =  *);  OR kafka.topic.partitions (host.name
      =  *) & (topic =  *) & (partition =  *);
  Brokers (Default):
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  Brokers (PER_BROKER):
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  Brokers - Kafka:
    dashboard_group: Kafka
    view_support: aggregated
    importQualifiers: counter.kafka.produce.total-time.count (plugin =  GenericJMX);
  Browser app health:
    dashboard_group: RUM applications
    view_support: N/A
    importQualifiers: rum.page_view.count (*);
  Browser page health:
    dashboard_group: RUM applications
    view_support: N/A
    importQualifiers: rum.page_view.count (*);
  Browser test:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  Browser test org:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  CF host:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  CF overview:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Cassandra Node:
    dashboard_group: Cassandra
    view_support: N/A
    importQualifiers: gauge.cassandra.Storage.Load.Count (*);  OR counter.cassandra.Storage.Load.Count
      (*);
  Cassandra Nodes:
    dashboard_group: Cassandra
    view_support: N/A
    importQualifiers: gauge.cassandra.Storage.Load.Count (*);  OR counter.cassandra.Storage.Load.Count
      (*);
  Cities:
    dashboard_group: Conviva
    view_support: N/A
    importQualifiers: conviva.quality_metriclens.total_attempts (*);  OR conviva.attempts
      (*);
  Cloud NAT:
    dashboard_group: Google Cloud NAT
    view_support: N/A
    importQualifiers: nat/allocated_ports (monitored_resource =  nat_gateway) & (gateway_name
      =  *);  OR nat/port_usage (monitored_resource =  nat_gateway) & (gateway_name
      =  *);
  Cloud NAT overview:
    dashboard_group: Google Cloud NAT
    view_support: N/A
    importQualifiers: nat/allocated_ports (monitored_resource =  nat_gateway) & (gateway_name
      =  *);  OR nat/port_usage (monitored_resource =  nat_gateway) & (gateway_name
      =  *);
  Cloud Storage bucket:
    dashboard_group: Google Cloud Storage
    view_support: instance
    importQualifiers: api/request_count (service =  storage);  OR network/sent_bytes_count
      (service =  storage);
  Cloud Storage overview:
    dashboard_group: Google Cloud Storage
    view_support: aggregated
    importQualifiers: api/request_count (service =  storage);  OR network/sent_bytes_count
      (service =  storage);
  Cloud controller:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Cloud controller - Cloud foundry:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Cloud integrations:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  Cloud run job:
    dashboard_group: Google Cloud Run
    view_support: N/A
    importQualifiers: container/cpu/utilizations (service =  run);
  Cloud run jobs:
    dashboard_group: Google Cloud Run
    view_support: N/A
    importQualifiers: container/cpu/utilizations (service =  run);
  Cloud run service:
    dashboard_group: Google Cloud Run
    view_support: N/A
    importQualifiers: container/cpu/utilizations (service =  run);
  Cloud run services:
    dashboard_group: Google Cloud Run
    view_support: N/A
    importQualifiers: container/cpu/utilizations (service =  run);
  Cloud task:
    dashboard_group: Google Cloud Tasks
    view_support: N/A
    importQualifiers: queue/depth (service =  cloudtasks);
  Cloud tasks overview:
    dashboard_group: Google Cloud Tasks
    view_support: N/A
    importQualifiers: queue/depth (service =  cloudtasks);
  CloudFront distribution:
    dashboard_group: AWS CloudFront
    view_support: instance
    importQualifiers: Requests (namespace =  AWS/CloudFront) & (stat =  sum);  OR
      BytesDownloaded (namespace =  AWS/CloudFront) & (stat =  sum);  OR BytesUploaded
      (namespace =  AWS/CloudFront) & (stat =  sum);
  CloudFront distributions:
    dashboard_group: AWS CloudFront
    view_support: aggregated
    importQualifiers: Requests (namespace =  AWS/CloudFront) & (stat =  sum);  OR
      BytesDownloaded (namespace =  AWS/CloudFront) & (stat =  sum);  OR BytesUploaded
      (namespace =  AWS/CloudFront) & (stat =  sum);
  Cluster:
    dashboard_group: vSphere
    view_support: N/A
    importQualifiers: vsphere.cpu_usage_percent (*);
  Cluster - Amazon MSK:
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  Cluster overview:
    dashboard_group: Google Kubernetes Engine
    view_support: aggregated
    importQualifiers: container/memory/request_utilization (*);
  Cluster(s):
    dashboard_group: Smart Gateway
    view_support: N/A
    importQualifiers: traces.totalUnique (cluster =  *);
  Clusters:
    dashboard_group: vSphere
    view_support: N/A
    importQualifiers: vsphere.cpu_usage_percent (*);
  Clusters - Amazon MSK:
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  Compute Engine instance:
    dashboard_group: Google Compute Engine
    view_support: instance
    importQualifiers: instance/cpu/utilization (service =  compute);  OR system.memory.usage
      (cloud.provider =  gcp);
  Compute Engine instance (StackDriver):
    dashboard_group: Google Compute Engine
    view_support: instance
    importQualifiers: instance/cpu/utilization (service =  compute);  OR system.memory.usage
      (cloud.provider =  gcp);
  Compute Engine instances:
    dashboard_group: Google Compute Engine
    view_support: aggregated
    importQualifiers: instance/cpu/utilization (service =  compute);  OR system.memory.usage
      (cloud.provider =  gcp);
  Compute Engine instances (StackDriver):
    dashboard_group: Google Compute Engine
    view_support: aggregated
    importQualifiers: instance/cpu/utilization (service =  compute);  OR system.memory.usage
      (cloud.provider =  gcp);
  Compute Engine logs:
    dashboard_group: Google Compute Engine
    view_support: N/A
    importQualifiers: instance/cpu/utilization (service =  compute);  OR system.memory.usage
      (cloud.provider =  gcp);
  Connections:
    dashboard_group: SAP HANA
    view_support: N/A
    importQualifiers: sap.hana.host.cpu.user (*);
  Consul client:
    dashboard_group: Consul
    view_support: N/A
    importQualifiers: gauge.consul.health.nodes.passing (plugin =  consul);
  Consul cluster:
    dashboard_group: Consul
    view_support: N/A
    importQualifiers: gauge.consul.health.nodes.passing (plugin =  consul);
  Consul connect (envoy):
    dashboard_group: Consul
    view_support: N/A
    importQualifiers: gauge.consul.health.nodes.passing (plugin =  consul);
  Consul health:
    dashboard_group: Consul
    view_support: N/A
    importQualifiers: gauge.consul.health.nodes.passing (plugin =  consul);
  Consul server:
    dashboard_group: Consul
    view_support: N/A
    importQualifiers: gauge.consul.health.nodes.passing (plugin =  consul);
  Consumer:
    dashboard_group: Kafka
    view_support: instance
    importQualifiers: counter.kafka.produce.total-time.count (plugin =  GenericJMX);
  Consumers:
    dashboard_group: Kafka
    view_support: aggregated
    importQualifiers: counter.kafka.produce.total-time.count (plugin =  GenericJMX);
  Container Engine:
    dashboard_group: Google Container Engine
    view_support: aggregated
    importQualifiers: container/disk/bytes_used (service =  container);  OR container/memory/bytes_used
      (service =  container);
  Container Engine container:
    dashboard_group: Google Container Engine
    view_support: instance
    importQualifiers: container/disk/bytes_used (service =  container);  OR container/memory/bytes_used
      (service =  container);
  Container Engine pod:
    dashboard_group: Google Container Engine
    view_support: instance
    importQualifiers: container/disk/bytes_used (service =  container);  OR container/memory/bytes_used
      (service =  container);
  CouchDB cluster:
    dashboard_group: CouchDB
    view_support: N/A
    importQualifiers: counter.couchdb.couchdb.database_reads (plugin =  couchdb);
  CouchDB node:
    dashboard_group: CouchDB
    view_support: N/A
    importQualifiers: counter.couchdb.couchdb.database_reads (plugin =  couchdb);
  CouchDB nodes:
    dashboard_group: CouchDB
    view_support: N/A
    importQualifiers: counter.couchdb.couchdb.database_reads (plugin =  couchdb);
  Couchbase bucket:
    dashboard_group: Couchbase
    view_support: instance
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase);
  Couchbase buckets:
    dashboard_group: Couchbase
    view_support: aggregated
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase);
  Couchbase cluster:
    dashboard_group: Couchbase
    view_support: instance
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase);
  Couchbase clusters:
    dashboard_group: Couchbase
    view_support: aggregated
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase);
  Couchbase node:
    dashboard_group: Couchbase
    view_support: instance
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase);
  Couchbase nodes:
    dashboard_group: Couchbase
    view_support: aggregated
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase);
  Cross zone dashboard:
    dashboard_group: Network explorer dashboards
    view_support: N/A
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  DNS:
    dashboard_group: Network explorer dashboards
    view_support: instance
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  DNS overview:
    dashboard_group: Network explorer dashboards
    view_support: aggregated
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  Data ingest:
    dashboard_group: Organization
    view_support: N/A
    importQualifiers: sf.org.subscription.datapointsPerMinute (*);
  Database:
    dashboard_group: PostgreSQL (New)
    view_support: N/A
    importQualifiers: postgres_sessions (*);
  Database - PostgreSQL(OTel):
    dashboard_group: PostgreSQL(OTel)
    view_support: instance
    importQualifiers: postgresql.backends (*);  OR postgresql.db_size (*);
  Database - PostgreSQL(Smart Agent):
    dashboard_group: PostgreSQL(Smart Agent)
    view_support: N/A
    importQualifiers: pg_numbackends (plugin =  postgresql);
  Databases:
    dashboard_group: PostgreSQL(Smart Agent)
    view_support: N/A
    importQualifiers: pg_numbackends (plugin =  postgresql);
  Databases - PostgreSQL(OTel):
    dashboard_group: PostgreSQL(OTel)
    view_support: aggregated
    importQualifiers: postgresql.backends (*);  OR postgresql.db_size (*);
  Datanode:
    dashboard_group: Hadoop HDFS
    view_support: N/A
    importQualifiers: gauge.hadoop-datanode-fs-capacity (plugin =  GenericJMX);  OR
      gauge.hadoop-namenode-max-heap (plugin =  GenericJMX);
  Datastore:
    dashboard_group: Google Cloud Datastore
    view_support: instance
    importQualifiers: entity/read_sizes (service =  datastore) & (monitored_resource
      =  datastore_request) & (project_id =  *);  OR api/request_count (service =  datastore)
      & (monitored_resource =  datastore_request) & (project_id =  *);
  Datastore overview:
    dashboard_group: Google Cloud Datastore
    view_support: aggregated
    importQualifiers: entity/read_sizes (service =  datastore) & (monitored_resource
      =  datastore_request) & (project_id =  *);  OR api/request_count (service =  datastore)
      & (monitored_resource =  datastore_request) & (project_id =  *);
  Devices:
    dashboard_group: Conviva
    view_support: N/A
    importQualifiers: conviva.quality_metriclens.total_attempts (*);  OR conviva.attempts
      (*);
  Diego:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Diego - Cloud foundry:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Diego cell:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Diego cell - Cloud foundry:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Docker container:
    dashboard_group: Docker
    view_support: N/A
    importQualifiers: cpu.usage.total (plugin =  docker);
  Docker host:
    dashboard_group: Docker
    view_support: N/A
    importQualifiers: cpu.usage.total (plugin =  docker);
  Docker hosts:
    dashboard_group: Docker
    view_support: N/A
    importQualifiers: cpu.usage.total (plugin =  docker);
  DocumentDB cluster:
    dashboard_group: AWS DocumentDB
    view_support: instance
    importQualifiers: CPUUtilization (namespace =  AWS/DocDB) & (stat =  mean);
  DocumentDB clusters:
    dashboard_group: AWS DocumentDB
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/DocDB) & (stat =  mean);
  DocumentDB instance:
    dashboard_group: AWS DocumentDB
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/DocDB) & (stat =  mean);
  DocumentDB instances:
    dashboard_group: AWS DocumentDB
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/DocDB) & (stat =  mean);
  EBS volume:
    dashboard_group: AWS EBS
    view_support: instance
    importQualifiers: VolumeIdleTime (namespace =  AWS/EBS) & (stat =  mean) & (VolumeId
      =  *);
  EBS volumes:
    dashboard_group: AWS EBS
    view_support: aggregated
    importQualifiers: VolumeIdleTime (namespace =  AWS/EBS) & (stat =  mean) & (VolumeId
      =  *);
  EC2 instance:
    dashboard_group: AWS EC2
    view_support: instance
    importQualifiers: CPUUtilization (namespace =  AWS/EC2) & (stat =  mean) & (InstanceId
      =  *);  OR system.memory.usage (cloud.provider =  aws);
  EC2 instance (CloudWatch):
    dashboard_group: AWS EC2
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/EC2) & (stat =  mean) & (InstanceId
      =  *);  OR system.memory.usage (cloud.provider =  aws);
  EC2 instances:
    dashboard_group: AWS EC2
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/EC2) & (stat =  mean) & (InstanceId
      =  *);  OR system.memory.usage (cloud.provider =  aws);
  EC2 instances (CloudWatch):
    dashboard_group: AWS EC2
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/EC2) & (stat =  mean) & (InstanceId
      =  *);  OR system.memory.usage (cloud.provider =  aws);
  ECS (AWS):
    dashboard_group: AWS ECS
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/ECS) & (stat =  mean) & (ClusterName
      =  *);  OR cpu.usage.system (ClusterName =  *);
  ECS (AWS) cluster:
    dashboard_group: AWS ECS
    view_support: instance
    importQualifiers: CPUUtilization (namespace =  AWS/ECS) & (stat =  mean) & (ClusterName
      =  *);  OR cpu.usage.system (ClusterName =  *);
  ECS (AWS) service:
    dashboard_group: AWS ECS
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/ECS) & (stat =  mean) & (ClusterName
      =  *);  OR cpu.usage.system (ClusterName =  *);
  ECS (SignalFx):
    dashboard_group: AWS ECS
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/ECS) & (stat =  mean) & (ClusterName
      =  *);  OR cpu.usage.system (ClusterName =  *);
  ECS (SignalFx) cluster:
    dashboard_group: AWS ECS
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/ECS) & (stat =  mean) & (ClusterName
      =  *);  OR cpu.usage.system (ClusterName =  *);
  ECS (SignalFx) task definition:
    dashboard_group: AWS ECS
    view_support: N/A
    importQualifiers: CPUUtilization (namespace =  AWS/ECS) & (stat =  mean) & (ClusterName
      =  *);  OR cpu.usage.system (ClusterName =  *);
  ELB instance:
    dashboard_group: AWS ELB
    view_support: instance
    importQualifiers: HealthyHostCount (namespace =  AWS/ELB) & (stat =  mean) & (LoadBalancerName
      =  *);
  ELB instances:
    dashboard_group: AWS ELB
    view_support: aggregated
    importQualifiers: HealthyHostCount (namespace =  AWS/ELB) & (stat =  mean) & (LoadBalancerName
      =  *);
  ELB logs:
    dashboard_group: AWS ELB
    view_support: aggregated
    importQualifiers: HealthyHostCount (namespace =  AWS/ELB) & (stat =  mean) & (LoadBalancerName
      =  *);
  ESX-Host:
    dashboard_group: vSphere (legacy)
    view_support: N/A
    importQualifiers: cpu.usage.average (metric_source =  vsphere);  OR mem.usage.average
      (metric_source =  vsphere);
  ESX-Host - vSphere:
    dashboard_group: vSphere
    view_support: instance
    importQualifiers: vsphere.cpu_usage_percent (*);
  ESX-Hosts:
    dashboard_group: vSphere (legacy)
    view_support: N/A
    importQualifiers: cpu.usage.average (metric_source =  vsphere);  OR mem.usage.average
      (metric_source =  vsphere);
  ESX-Hosts - vSphere:
    dashboard_group: vSphere
    view_support: aggregated
    importQualifiers: vsphere.cpu_usage_percent (*);
  ElastiCache:
    dashboard_group: AWS ElastiCache
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/ElastiCache) & (stat =  mean)
      & (CacheClusterId =  *);
  ElastiCache cluster:
    dashboard_group: AWS ElastiCache
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/ElastiCache) & (stat =  mean)
      & (CacheClusterId =  *);
  ElastiCache node:
    dashboard_group: AWS ElastiCache
    view_support: instance
    importQualifiers: CPUUtilization (namespace =  AWS/ElastiCache) & (stat =  mean)
      & (CacheClusterId =  *);
  Elastic pool:
    dashboard_group: Azure SQL server elastic pools
    view_support: instance
    importQualifiers: eDTU_used (resource_type =  Microsoft.Sql/servers/elasticpools
      | microsoft.sql/servers/elasticpools) & (primary_aggregation_type =  true);  OR
      eDTU_limit (resource_type =  Microsoft.Sql/servers/elasticpools | microsoft.sql/servers/elasticpools)
      & (primary_aggregation_type =  true);  OR dtu_consumption_percent (resource_type
      =  Microsoft.Sql/servers/elasticpools | microsoft.sql/servers/elasticpools)
      & (primary_aggregation_type =  true);
  Elastic pools:
    dashboard_group: Azure SQL server elastic pools
    view_support: aggregated
    importQualifiers: eDTU_used (resource_type =  Microsoft.Sql/servers/elasticpools
      | microsoft.sql/servers/elasticpools) & (primary_aggregation_type =  true);  OR
      eDTU_limit (resource_type =  Microsoft.Sql/servers/elasticpools | microsoft.sql/servers/elasticpools)
      & (primary_aggregation_type =  true);  OR dtu_consumption_percent (resource_type
      =  Microsoft.Sql/servers/elasticpools | microsoft.sql/servers/elasticpools)
      & (primary_aggregation_type =  true);
  Elasticsearch:
    dashboard_group: Elasticsearch
    view_support: N/A
    importQualifiers: counter.indices.indexing.index-total (plugin =  elasticsearch);  OR
      elasticsearch.indices.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch cluster:
    dashboard_group: Elasticsearch
    view_support: instance
    importQualifiers: counter.indices.indexing.index-total (plugin =  elasticsearch);  OR
      elasticsearch.indices.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch clusters:
    dashboard_group: Elasticsearch
    view_support: aggregated
    importQualifiers: counter.indices.indexing.index-total (plugin =  elasticsearch);  OR
      elasticsearch.indices.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch index:
    dashboard_group: Elasticsearch index
    view_support: instance
    importQualifiers: counter.indices.total.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch indexes:
    dashboard_group: Elasticsearch index
    view_support: aggregated
    importQualifiers: counter.indices.total.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch node:
    dashboard_group: Elasticsearch
    view_support: instance
    importQualifiers: counter.indices.indexing.index-total (plugin =  elasticsearch);  OR
      elasticsearch.indices.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch nodes:
    dashboard_group: Elasticsearch
    view_support: aggregated
    importQualifiers: counter.indices.indexing.index-total (plugin =  elasticsearch);  OR
      elasticsearch.indices.indexing.index-total (plugin =  elasticsearch);
  Embedded NGINX:
    dashboard_group: GitLab
    view_support: instance
    importQualifiers: sidekiq_queue_size (host.name =  *);  OR sidekiq_queue_latency
      (host.name =  *);  OR grpc_server_handled_total (host.name =  *);  OR gitlab_workhorse_http_request_duration_seconds
      (host.name =  *);  OR nginx_vts_server_requests_total (host.name =  *);
  Embedded PostgreSQL:
    dashboard_group: Couchbase
    view_support: N/A
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase);
  Engagement:
    dashboard_group: Organization
    view_support: N/A
    importQualifiers: sf.org.subscription.datapointsPerMinute (*);
  Engagement - Organization metrics:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  Engine specifics:
    dashboard_group: AWS RDS
    view_support: instance
    importQualifiers: CPUUtilization (namespace =  AWS/RDS) & (stat =  mean) & (DBInstanceIdentifier
      =  *);
  Enhanced RDS instance:
    dashboard_group: AWS enhanced RDS monitoring
    view_support: N/A
    importQualifiers: diskIO.avgQueueLen (Namespace =  AWS/RDS);  OR diskIO.avgQueueLen
      (namespace =  AWS/RDS);
  Enhanced RDS instance - Aurora:
    dashboard_group: AWS enhanced RDS monitoring - Aurora
    view_support: N/A
    importQualifiers: cpuUtilization.total (EngineName =  Aurora);  OR OSprocesses.cpuUsedPc
      (EngineName =  Aurora);  OR RDSprocesses.cpuUsedPc (EngineName =  Aurora);  OR
      diskIO.diskQueueDepth (EngineName =  Aurora);  OR fileSys.maxFiles (EngineName
      =  Aurora);  OR loadAverageMinute.fifteen (EngineName =  Aurora);  OR memory.active
      (EngineName =  Aurora);
  Enhanced RDS instance - SQL server:
    dashboard_group: AWS enhanced RDS monitoring - SQL server
    view_support: N/A
    importQualifiers: cpuUtilization.idle (EngineName =  SqlServer);
  Enhanced RDS instances:
    dashboard_group: AWS enhanced RDS monitoring
    view_support: N/A
    importQualifiers: diskIO.avgQueueLen (Namespace =  AWS/RDS);  OR diskIO.avgQueueLen
      (namespace =  AWS/RDS);
  Enhanced RDS instances - Aurora:
    dashboard_group: AWS enhanced RDS monitoring - Aurora
    view_support: N/A
    importQualifiers: cpuUtilization.total (EngineName =  Aurora);  OR OSprocesses.cpuUsedPc
      (EngineName =  Aurora);  OR RDSprocesses.cpuUsedPc (EngineName =  Aurora);  OR
      diskIO.diskQueueDepth (EngineName =  Aurora);  OR fileSys.maxFiles (EngineName
      =  Aurora);  OR loadAverageMinute.fifteen (EngineName =  Aurora);  OR memory.active
      (EngineName =  Aurora);
  Enhanced RDS instances - SQL server:
    dashboard_group: AWS enhanced RDS monitoring - SQL server
    view_support: N/A
    importQualifiers: cpuUtilization.idle (EngineName =  SqlServer);
  EntryPoint:
    dashboard_group: Traefik
    view_support: instance
    importQualifiers: traefik_entrypoint_requests_total (*);
  EntryPoints:
    dashboard_group: Traefik
    view_support: aggregated
    importQualifiers: traefik_entrypoint_requests_total (*);
  Envoy:
    dashboard_group: Envoy
    view_support: N/A
    importQualifiers: upstream_rq_completed (mesh =  *) & (_exists_ !=  plugin);
  Envoy cluster:
    dashboard_group: Envoy summary
    view_support: instance
    importQualifiers: envoy_cluster_upstream_cx_total (cluster_name =  *);
  Envoy clusters:
    dashboard_group: Envoy summary
    view_support: aggregated
    importQualifiers: envoy_cluster_upstream_cx_total (cluster_name =  *);
  Envoy listener:
    dashboard_group: Envoy summary
    view_support: instance
    importQualifiers: envoy_cluster_upstream_cx_total (cluster_name =  *);
  Envoy listeners:
    dashboard_group: Envoy summary
    view_support: aggregated
    importQualifiers: envoy_cluster_upstream_cx_total (cluster_name =  *);
  Envoy service:
    dashboard_group: Envoy istio
    view_support: N/A
    importQualifiers: envoy_cluster_membership_healthy (*);
  Envoy services:
    dashboard_group: Envoy istio
    view_support: N/A
    importQualifiers: envoy_cluster_membership_healthy (*);
  Firehose:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Firehose - Cloud foundry:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Flexibleserver:
    dashboard_group: Azure PostgreSQL - Flexible server
    view_support: instance
    importQualifiers: cpu_percent (resource_type =  microsoft.dbforpostgresql/flexibleservers
      | Microsoft.DBforPostgreSQL/flexibleServers) & (azure_resource_name =  *);  OR
      active_connections (resource_type =  Microsoft.DBforPostgreSQL/flexibleServers
      | microsoft.dbforpostgresql/flexibleservers) & (azure_resource_name =  *);
  Flexibleserver - Azure MySQL - Flexible server:
    dashboard_group: Azure MySQL - Flexible server
    view_support: instance
    importQualifiers: cpu_percent (resource_type =  Microsoft.DBforMySQL/flexibleServers);  OR
      active_connections (resource_type =  Microsoft.DBforMySQL/flexibleServers);
  Flexibleserver overview:
    dashboard_group: Azure PostgreSQL - Flexible server
    view_support: aggregated
    importQualifiers: cpu_percent (resource_type =  microsoft.dbforpostgresql/flexibleservers
      | Microsoft.DBforPostgreSQL/flexibleServers) & (azure_resource_name =  *);  OR
      active_connections (resource_type =  Microsoft.DBforPostgreSQL/flexibleServers
      | microsoft.dbforpostgresql/flexibleservers) & (azure_resource_name =  *);
  Flexibleserver overview - Azure MySQL - Flexible server:
    dashboard_group: Azure MySQL - Flexible server
    view_support: aggregated
    importQualifiers: cpu_percent (resource_type =  Microsoft.DBforMySQL/flexibleServers);  OR
      active_connections (resource_type =  Microsoft.DBforMySQL/flexibleServers);
  GCF (SignalFx) function:
    dashboard_group: Google Cloud Functions (SignalFx)
    view_support: N/A
    importQualifiers: function.invocations (metric_source =  gcf_wrapper);  OR function.duration
      (metric_source =  gcf_wrapper);
  GCF (SignalFx) overview:
    dashboard_group: Google Cloud Functions (SignalFx)
    view_support: N/A
    importQualifiers: function.invocations (metric_source =  gcf_wrapper);  OR function.duration
      (metric_source =  gcf_wrapper);
  GCF (stackdriver) function:
    dashboard_group: Google Cloud Functions
    view_support: instance
    importQualifiers: function/execution_count (service =  cloudfunctions);  OR function/user_memory_bytes
      (service =  cloudfunctions);
  GCF (stackdriver) overview:
    dashboard_group: Google Cloud Functions
    view_support: aggregated
    importQualifiers: function/execution_count (service =  cloudfunctions);  OR function/user_memory_bytes
      (service =  cloudfunctions);
  GCP:
    dashboard_group: Cloud integrations usage
    view_support: N/A
    importQualifiers: sf.org.num.azureServiceClientCallCount (*);  OR sf.org.num.gcpServiceClientCallCount
      (*);
  GKE node:
    dashboard_group: Google Kubernetes Engine
    view_support: aggregated
    importQualifiers: container/memory/request_utilization (*);
  GKE pod:
    dashboard_group: Google Kubernetes Engine
    view_support: aggregated
    importQualifiers: container/memory/request_utilization (*);
  GPU health:
    dashboard_group: Nvidia GPU
    view_support: aggregated
    importQualifiers: DCGM_FI_DEV_GPU_UTIL (sf_key =  gpu) & (sf_key =  UUID);
  GPU performance:
    dashboard_group: Nvidia GPU
    view_support: aggregated
    importQualifiers: DCGM_FI_DEV_GPU_UTIL (sf_key =  gpu) & (sf_key =  UUID);
  GPU usage:
    dashboard_group: Nvidia GPU
    view_support: instance
    importQualifiers: DCGM_FI_DEV_GPU_UTIL (sf_key =  gpu) & (sf_key =  UUID);
  Garden container:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Garden containers:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Gitlab:
    dashboard_group: GitLab
    view_support: instance
    importQualifiers: sidekiq_queue_size (host.name =  *);  OR sidekiq_queue_latency
      (host.name =  *);  OR grpc_server_handled_total (host.name =  *);  OR gitlab_workhorse_http_request_duration_seconds
      (host.name =  *);  OR nginx_vts_server_requests_total (host.name =  *);
  Google Cloud SQL:
    dashboard_group: Google Cloud SQL
    view_support: N/A
    importQualifiers: database/cpu/utilization (database_id =  *) & (service =  cloudsql);
  Google Cloud SQL Instance:
    dashboard_group: Google Cloud SQL
    view_support: N/A
    importQualifiers: database/cpu/utilization (database_id =  *) & (service =  cloudsql);
  HAProxy backend:
    dashboard_group: HAProxy
    view_support: N/A
    importQualifiers: derive.requests (plugin =  haproxy);  OR haproxy_request_rate
      (plugin =  haproxy);
  HAProxy frontend:
    dashboard_group: HAProxy
    view_support: N/A
    importQualifiers: derive.requests (plugin =  haproxy);  OR haproxy_request_rate
      (plugin =  haproxy);
  HAProxy overview:
    dashboard_group: HAProxy
    view_support: N/A
    importQualifiers: derive.requests (plugin =  haproxy);  OR haproxy_request_rate
      (plugin =  haproxy);
  HTTP:
    dashboard_group: Network explorer dashboards
    view_support: instance
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  HTTP - Outbound:
    dashboard_group: Network explorer dashboards
    view_support: instance
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  HTTP overview:
    dashboard_group: Network explorer dashboards
    view_support: aggregated
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  Heroku Dynos:
    dashboard_group: Heroku
    view_support: N/A
    importQualifiers: heroku.memory_quota (*);
  Heroku dyno:
    dashboard_group: Heroku
    view_support: N/A
    importQualifiers: heroku.memory_quota (*);
  Heroku web app:
    dashboard_group: Heroku
    view_support: N/A
    importQualifiers: heroku.memory_quota (*);
  Host:
    dashboard_group: MySQL (OTel)
    view_support: instance
    importQualifiers: mysql.operations (operation =  *) & (host.name =  *);  OR mysql.commands
      (host.name =  *) & (command =  *);
  Host - Data Center Hosts:
    dashboard_group: Data Center Hosts
    view_support: instance
    importQualifiers: cpu.utilization (host =  *) & (gcp_id !=  *) & (azure_resource_id
      !=  *) & (cloud.provider !=  *) & (AWSUniqueId !=  *);
  Host - PostgreSQL(OTel):
    dashboard_group: PostgreSQL(OTel)
    view_support: instance
    importQualifiers: postgresql.backends (*);  OR postgresql.db_size (*);
  Host - SAP HANA:
    dashboard_group: SAP HANA
    view_support: N/A
    importQualifiers: sap.hana.host.cpu.user (*);
  Host - Weaviate:
    dashboard_group: Weaviate
    view_support: instance
    importQualifiers: object_count (*);
  Host with agent installed:
    dashboard_group: Hosts with agent installed
    view_support: N/A
    importQualifiers: cpu.utilization (*);
  Hosts:
    dashboard_group: MySQL (OTel)
    view_support: aggregated
    importQualifiers: mysql.operations (operation =  *) & (host.name =  *);  OR mysql.commands
      (host.name =  *) & (command =  *);
  Hosts - Data Center Hosts:
    dashboard_group: Data Center Hosts
    view_support: aggregated
    importQualifiers: cpu.utilization (host =  *) & (gcp_id !=  *) & (azure_resource_id
      !=  *) & (cloud.provider !=  *) & (AWSUniqueId !=  *);
  Hosts - PostgreSQL(OTel):
    dashboard_group: PostgreSQL(OTel)
    view_support: aggregated
    importQualifiers: postgresql.backends (*);  OR postgresql.db_size (*);
  Hosts - Weaviate:
    dashboard_group: Weaviate
    view_support: aggregated
    importQualifiers: object_count (*);
  Hosts with agent installed:
    dashboard_group: Hosts with agent installed
    view_support: N/A
    importQualifiers: cpu.utilization (*);
  Hypervisor:
    dashboard_group: OpenStack
    view_support: N/A
    importQualifiers: gauge.openstack.nova.hypervisor.vcpus (plugin =  openstack);
  I/O:
    dashboard_group: SAP HANA
    view_support: N/A
    importQualifiers: sap.hana.host.cpu.user (*);
  IIS server:
    dashboard_group: Windows IIS
    view_support: instance
    importQualifiers: web_service.total_method_requests_sec (*);
  IIS servers:
    dashboard_group: Windows IIS
    view_support: aggregated
    importQualifiers: web_service.total_method_requests_sec (*);
  IMM entitlements:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  IMM system limits:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  IMM throttling:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  ISPs:
    dashboard_group: Conviva
    view_support: N/A
    importQualifiers: conviva.quality_metriclens.total_attempts (*);  OR conviva.attempts
      (*);
  Instance:
    dashboard_group: MongoDB (OTel)
    view_support: instance
    importQualifiers: mongodb.storage.size (server.address =  *);  OR mongodb.memory.usage
      (server.address =  *) & (database =  *);
  Instance - OpenStack:
    dashboard_group: OpenStack
    view_support: N/A
    importQualifiers: gauge.openstack.nova.hypervisor.vcpus (plugin =  openstack);
  Instances:
    dashboard_group: MongoDB (OTel)
    view_support: aggregated
    importQualifiers: mongodb.storage.size (server.address =  *);  OR mongodb.memory.usage
      (server.address =  *) & (database =  *);
  Internals:
    dashboard_group: Smart Gateway
    view_support: N/A
    importQualifiers: traces.totalUnique (cluster =  *);
  Intro to Splunk Observability Cloud:
    dashboard_group: Sample data
    view_support: N/A
    importQualifiers: demo.trans.count (*);
  JVM:
    dashboard_group: Kafka
    view_support: N/A
    importQualifiers: counter.kafka.produce.total-time.count (plugin =  GenericJMX);
  Java process:
    dashboard_group: JMX (collectd)
    view_support: instance
    importQualifiers: gauge.loaded_classes (plugin =  GenericJMX);
  Java processes:
    dashboard_group: JMX (collectd)
    view_support: aggregated
    importQualifiers: gauge.loaded_classes (plugin =  GenericJMX);
  Java runtime metrics:
    dashboard_group: APM java services
    view_support: N/A
    importQualifiers: runtime.jvm.classes.loaded (*);
  Java runtime metrics (Otel 2.x):
    dashboard_group: APM Java services (OTel 2.x)
    view_support: N/A
    importQualifiers: jvm.class.loaded (*);
  Jenkins:
    dashboard_group: Jenkins
    view_support: N/A
    importQualifiers: gauge.jenkins.node.online.status (plugin =  jenkins);
  Jenkins controller:
    dashboard_group: Jenkins
    view_support: N/A
    importQualifiers: gauge.jenkins.node.online.status (plugin =  jenkins);
  Jira:
    dashboard_group: JIRA
    view_support: N/A
    importQualifiers: jira_all_users_gauge (service.name =  jira) & (host.name =  *);  OR
      jira_active_users_gauge (service.name =  jira) & (host.name =  *);
  Jira overview:
    dashboard_group: JIRA
    view_support: N/A
    importQualifiers: jira_all_users_gauge (service.name =  jira) & (host.name =  *);  OR
      jira_active_users_gauge (service.name =  jira) & (host.name =  *);
  K8s Daemonset:
    dashboard_group: Kubernetes - Workloads
    view_support: instance
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s Daemonsets:
    dashboard_group: Kubernetes - Workloads
    view_support: aggregated
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s cluster:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s cluster services:
    dashboard_group: Kubernetes
    view_support: N/A
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s clusters:
    dashboard_group: Kubernetes
    view_support: aggregated
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s container:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s containers:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s control plane logs:
    dashboard_group: Kubernetes
    view_support: N/A
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s control plane summary:
    dashboard_group: Kubernetes
    view_support: N/A
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s cronjob:
    dashboard_group: Kubernetes - Workloads
    view_support: instance
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s cronjobs:
    dashboard_group: Kubernetes - Workloads
    view_support: aggregated
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s deployment:
    dashboard_group: Kubernetes - Workloads
    view_support: instance
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s deployments:
    dashboard_group: Kubernetes - Workloads
    view_support: aggregated
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s job:
    dashboard_group: Kubernetes - Workloads
    view_support: instance
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s jobs:
    dashboard_group: Kubernetes - Workloads
    view_support: aggregated
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s metrics adapter:
    dashboard_group: SignalFx k8s metric adapter
    view_support: N/A
    importQualifiers: hpas_with_metrics (*);
  K8s namespace:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s namespaces:
    dashboard_group: Kubernetes
    view_support: aggregated
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s node:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s node logs:
    dashboard_group: Kubernetes
    view_support: aggregated
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s nodes:
    dashboard_group: Kubernetes
    view_support: aggregated
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s operations:
    dashboard_group: Kubernetes
    view_support: N/A
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s overview:
    dashboard_group: Kubernetes
    view_support: N/A
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s pod:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s pod logs:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s pods:
    dashboard_group: Kubernetes
    view_support: aggregated
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s statefulset:
    dashboard_group: Kubernetes - Workloads
    view_support: instance
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s statefulsets:
    dashboard_group: Kubernetes - Workloads
    view_support: aggregated
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  K8s workload:
    dashboard_group: Kubernetes
    view_support: instance
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  K8s workloads:
    dashboard_group: Kubernetes
    view_support: aggregated
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);  OR k8s.pod.phase
      (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase (sf_key =  kubernetes_workload_name);  OR
      container_cpu_utilization (sf_key =  kubernetes_pod_uid);  OR container.cpu.time
      (sf_key =  k8s.pod.uid);
  Key capacity indicators:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Key capacity indicators - Cloud foundry:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Kinesis Analytics:
    dashboard_group: AWS Kinesis Analytics
    view_support: instance
    importQualifiers: Bytes (namespace =  AWS/KinesisAnalytics);
  Kinesis Analytics overview:
    dashboard_group: AWS Kinesis Analytics
    view_support: aggregated
    importQualifiers: Bytes (namespace =  AWS/KinesisAnalytics);
  Kinesis Stream:
    dashboard_group: AWS Kinesis Streams
    view_support: instance
    importQualifiers: GetRecords.Latency (namespace =  AWS/Kinesis) & (stat =  mean);
  Kinesis Streams overview:
    dashboard_group: AWS Kinesis Streams
    view_support: aggregated
    importQualifiers: GetRecords.Latency (namespace =  AWS/Kinesis) & (stat =  mean);
  Knative AutoScaling:
    dashboard_group: Knative
    view_support: N/A
    importQualifiers: autoscaler_stable_request_concurrency (*);
  Knative control plane:
    dashboard_group: Knative
    view_support: N/A
    importQualifiers: autoscaler_stable_request_concurrency (*);
  Knative istio:
    dashboard_group: Knative
    view_support: N/A
    importQualifiers: autoscaler_stable_request_concurrency (*);
  Knative workloads:
    dashboard_group: Knative
    view_support: N/A
    importQualifiers: autoscaler_stable_request_concurrency (*);
  Kong host:
    dashboard_group: Kong Gateway
    view_support: instance
    importQualifiers: kong_http_requests_total (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_request_latency_ms_sum (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_bandwidth_bytes (host.name =  *) & (route =  *) & (service =  *);  OR
      kong_memory_workers_lua_vms_bytes (host.name =  *);
  Kong hosts:
    dashboard_group: Kong Gateway
    view_support: aggregated
    importQualifiers: kong_http_requests_total (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_request_latency_ms_sum (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_bandwidth_bytes (host.name =  *) & (route =  *) & (service =  *);  OR
      kong_memory_workers_lua_vms_bytes (host.name =  *);
  Kong server overview:
    dashboard_group: Kong
    view_support: N/A
    importQualifiers: gauge.kong.database.reachable (plugin =  kong);
  Kong servers overview:
    dashboard_group: Kong
    view_support: N/A
    importQualifiers: gauge.kong.database.reachable (plugin =  kong);
  Kubernetes overview:
    dashboard_group: Knative
    view_support: N/A
    importQualifiers: autoscaler_stable_request_concurrency (*);
  Lambda (AWS) function:
    dashboard_group: AWS Lambda
    view_support: instance
    importQualifiers: ConcurrentExecutions (namespace =  AWS/Lambda) & (stat =  upper)
      & (Resource =  *);  OR Duration (namespace =  AWS/Lambda) & (Resource =  *)
      & (stat =  mean);
  Lambda (AWS) overview:
    dashboard_group: AWS Lambda
    view_support: aggregated
    importQualifiers: ConcurrentExecutions (namespace =  AWS/Lambda) & (stat =  upper)
      & (Resource =  *);  OR Duration (namespace =  AWS/Lambda) & (Resource =  *)
      & (stat =  mean);
  Lambda (SignalFx) function (deprecated):
    dashboard_group: AWS Lambda (SignalFx) (deprecated)
    view_support: N/A
    importQualifiers: function.invocations (aws_function_name =  *) & (AWSUniqueId
      =  *);  OR function.duration (aws_function_name =  *) & (AWSUniqueId =  *);
  Lambda (SignalFx) overview (deprecated):
    dashboard_group: AWS Lambda (SignalFx) (deprecated)
    view_support: N/A
    importQualifiers: function.invocations (aws_function_name =  *) & (AWSUniqueId
      =  *);  OR function.duration (aws_function_name =  *) & (AWSUniqueId =  *);
  Lambda extension:
    dashboard_group: AWS Lambda
    view_support: N/A
    importQualifiers: ConcurrentExecutions (namespace =  AWS/Lambda) & (stat =  upper)
      & (Resource =  *);  OR Duration (namespace =  AWS/Lambda) & (Resource =  *)
      & (stat =  mean);
  Lambda function:
    dashboard_group: AWS Lambda (OTel)
    view_support: instance
    importQualifiers: lambda.function.lifetime (aws_function_name =  *) & (AWSUniqueId
      =  *);  OR lambda.function.invocation (aws_function_name =  *) & (AWSUniqueId
      =  *);
  Lambda functions:
    dashboard_group: AWS Lambda (OTel)
    view_support: aggregated
    importQualifiers: lambda.function.lifetime (aws_function_name =  *) & (AWSUniqueId
      =  *);  OR lambda.function.invocation (aws_function_name =  *) & (AWSUniqueId
      =  *);
  Lambda logs:
    dashboard_group: AWS Lambda
    view_support: aggregated
    importQualifiers: ConcurrentExecutions (namespace =  AWS/Lambda) & (stat =  upper)
      & (Resource =  *);  OR Duration (namespace =  AWS/Lambda) & (Resource =  *)
      & (stat =  mean);
  LangChain:
    dashboard_group: LangChain
    view_support: instance
    importQualifiers: gen_ai.total.requests (gen_ai.system =  langchain);
  LangChains:
    dashboard_group: LangChain
    view_support: aggregated
    importQualifiers: gen_ai.total.requests (gen_ai.system =  langchain);
  License usage overview:
    dashboard_group: Executive Level
    view_support: N/A
    importQualifiers: service.request.count (sf_environment =  *) & (sf_service =  *);  OR
      sf.org.numLogsReceivedByToken (*);  OR rum.page_view.count (*);  OR rum.page_view.count
      (sf_ua_browsername =  *);  OR sf.org.apm.numContainers (*);  OR synthetics.run.count
      (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent (test =  *)
      & (location =  *);
  Log Observer data usage:
    dashboard_group: Log Observer usage
    view_support: N/A
    importQualifiers: sf.org.log.grossMessageBytesReceived (*);  OR sf.org.log.numMessageBytesReceived
      (*);
  Logs:
    dashboard_group: Executive Level
    view_support: N/A
    importQualifiers: service.request.count (sf_environment =  *) & (sf_service =  *);  OR
      sf.org.numLogsReceivedByToken (*);  OR rum.page_view.count (*);  OR rum.page_view.count
      (sf_ua_browsername =  *);  OR sf.org.apm.numContainers (*);  OR synthetics.run.count
      (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent (test =  *)
      & (location =  *);
  Logstash:
    dashboard_group: Logstash
    view_support: N/A
    importQualifiers: node.stats.pipelines.events.in (*);
  MapReduce applications:
    dashboard_group: Hadoop MapReduce
    view_support: N/A
    importQualifiers: gauge.hadoop.resource.manager.apps.progress (plugin =  apache_hadoop);  OR
      gauge.hadoop.resource.manager.apps.vcoreSeconds (plugin =  apache_hadoop);
  MapReduce jobs:
    dashboard_group: Hadoop MapReduce
    view_support: N/A
    importQualifiers: gauge.hadoop.resource.manager.apps.progress (plugin =  apache_hadoop);  OR
      gauge.hadoop.resource.manager.apps.vcoreSeconds (plugin =  apache_hadoop);
  MapReduce resource usage:
    dashboard_group: Hadoop MapReduce
    view_support: N/A
    importQualifiers: gauge.hadoop.resource.manager.apps.progress (plugin =  apache_hadoop);  OR
      gauge.hadoop.resource.manager.apps.vcoreSeconds (plugin =  apache_hadoop);
  Marathon:
    dashboard_group: Mesosphere marathon
    view_support: N/A
    importQualifiers: gauge.marathon.app.instances.total (plugin =  marathon);
  Marathon application:
    dashboard_group: Mesosphere marathon
    view_support: N/A
    importQualifiers: gauge.marathon.app.instances.total (plugin =  marathon);
  Marathon resources:
    dashboard_group: Mesosphere marathon
    view_support: N/A
    importQualifiers: gauge.marathon.app.instances.total (plugin =  marathon);
  Marathon task:
    dashboard_group: Mesosphere marathon
    view_support: N/A
    importQualifiers: gauge.marathon.app.instances.total (plugin =  marathon);
  Memcached:
    dashboard_group: Memcached
    view_support: N/A
    importQualifiers: df.cache.used (plugin =  memcached);
  Memcached (a):
    dashboard_group: Memcached
    view_support: N/A
    importQualifiers: df.cache.used (plugin =  memcached);
  Mesos agent:
    dashboard_group: Mesos
    view_support: N/A
    importQualifiers: percent.slave_cpus_percent (plugin =  mesos);
  Mesos cluster:
    dashboard_group: Mesos
    view_support: N/A
    importQualifiers: percent.slave_cpus_percent (plugin =  mesos);
  Mesos clusters:
    dashboard_group: Mesos
    view_support: N/A
    importQualifiers: percent.slave_cpus_percent (plugin =  mesos);
  Mesos master:
    dashboard_group: Mesos
    view_support: N/A
    importQualifiers: percent.slave_cpus_percent (plugin =  mesos);
  Microsoft SQL database:
    dashboard_group: Microsoft SQL server
    view_support: instance
    importQualifiers: sqlserver_server_properties.db_online (plugin =  telegraf-sqlserver);
  Microsoft SQL databases:
    dashboard_group: Microsoft SQL server
    view_support: aggregated
    importQualifiers: sqlserver_server_properties.db_online (plugin =  telegraf-sqlserver);
  Microsoft SQL instance:
    dashboard_group: Microsoft SQL server
    view_support: instance
    importQualifiers: sqlserver_server_properties.db_online (plugin =  telegraf-sqlserver);
  Microsoft SQL instances:
    dashboard_group: Microsoft SQL server
    view_support: aggregated
    importQualifiers: sqlserver_server_properties.db_online (plugin =  telegraf-sqlserver);
  Mobile app health:
    dashboard_group: RUM applications
    view_support: N/A
    importQualifiers: rum.page_view.count (*);
  MongoDB cluster:
    dashboard_group: MongoDB
    view_support: instance
    importQualifiers: counter.network.numRequests (plugin =  mongo);
  MongoDB clusters:
    dashboard_group: MongoDB
    view_support: aggregated
    importQualifiers: counter.network.numRequests (plugin =  mongo);
  MongoDB host:
    dashboard_group: MongoDB
    view_support: instance
    importQualifiers: counter.network.numRequests (plugin =  mongo);
  MongoDB hosts:
    dashboard_group: MongoDB
    view_support: aggregated
    importQualifiers: counter.network.numRequests (plugin =  mongo);
  MySQL host:
    dashboard_group: MySQL
    view_support: instance
    importQualifiers: threads.connected (plugin =  mysql);
  MySQL hosts:
    dashboard_group: MySQL
    view_support: aggregated
    importQualifiers: threads.connected (plugin =  mysql);
  MySQL summary:
    dashboard_group: MySQL (OTel)
    view_support: N/A
    importQualifiers: mysql.operations (operation =  *) & (host.name =  *);  OR mysql.commands
      (host.name =  *) & (command =  *);
  NGINX server:
    dashboard_group: NGINX (OTel)
    view_support: N/A
    importQualifiers: nginx.requests (*);
  NGINX server - NGINX:
    dashboard_group: NGINX
    view_support: instance
    importQualifiers: nginx_connections.active (plugin =  nginx);
  NGINX servers:
    dashboard_group: NGINX (OTel)
    view_support: N/A
    importQualifiers: nginx.requests (*);
  NGINX servers - NGINX:
    dashboard_group: NGINX
    view_support: aggregated
    importQualifiers: nginx_connections.active (plugin =  nginx);
  Namenode:
    dashboard_group: Hadoop HDFS
    view_support: N/A
    importQualifiers: gauge.hadoop-datanode-fs-capacity (plugin =  GenericJMX);  OR
      gauge.hadoop-namenode-max-heap (plugin =  GenericJMX);
  Neutron:
    dashboard_group: OpenStack
    view_support: N/A
    importQualifiers: gauge.openstack.nova.hypervisor.vcpus (plugin =  openstack);
  Nginx+ overview:
    dashboard_group: NGINX plus
    view_support: N/A
    importQualifiers: gauge.requests.current (plugin =  nginx-plus);
  Nginx+ server connections:
    dashboard_group: NGINX plus
    view_support: N/A
    importQualifiers: gauge.requests.current (plugin =  nginx-plus);
  Nginx+ server server zones:
    dashboard_group: NGINX plus
    view_support: N/A
    importQualifiers: gauge.requests.current (plugin =  nginx-plus);
  Nginx+ server upstreams:
    dashboard_group: NGINX plus
    view_support: N/A
    importQualifiers: gauge.requests.current (plugin =  nginx-plus);
  NodeJS runtime metrics:
    dashboard_group: APM NodeJS services
    view_support: N/A
    importQualifiers: nodejs.memory.heap.total (*);
  OpenAI:
    dashboard_group: OpenAI
    view_support: instance
    importQualifiers: gen_ai.client.token.usage (*);
  OpenAIs:
    dashboard_group: OpenAI
    view_support: aggregated
    importQualifiers: gen_ai.client.token.usage (*);
  OpenSearch Domain:
    dashboard_group: AWS OpenSearch
    view_support: instance
    importQualifiers: ClusterStatus.green (namespace =  AWS/ES) & (stat =  upper);  OR
      Nodes (namespace =  AWS/ES) & (stat =  upper);
  OpenSearch Domains:
    dashboard_group: AWS OpenSearch
    view_support: aggregated
    importQualifiers: ClusterStatus.green (namespace =  AWS/ES) & (stat =  upper);  OR
      Nodes (namespace =  AWS/ES) & (stat =  upper);
  OpenSearch Node:
    dashboard_group: AWS OpenSearch
    view_support: N/A
    importQualifiers: ClusterStatus.green (namespace =  AWS/ES) & (stat =  upper);  OR
      Nodes (namespace =  AWS/ES) & (stat =  upper);
  OpenSearch Nodes:
    dashboard_group: AWS OpenSearch
    view_support: N/A
    importQualifiers: ClusterStatus.green (namespace =  AWS/ES) & (stat =  upper);  OR
      Nodes (namespace =  AWS/ES) & (stat =  upper);
  OpenTelemetry Collector:
    dashboard_group: OpenTelemetry Collector
    view_support: N/A
    importQualifiers: otelcol_process_cpu_seconds (*);
  OpsWorks:
    dashboard_group: AWS OpsWorks
    view_support: instance
    importQualifiers: cpu_idle (namespace =  AWS/OpsWorks) & (stat =  mean) & (StackId
      =  *);
  OpsWorks overview:
    dashboard_group: AWS OpsWorks
    view_support: aggregated
    importQualifiers: cpu_idle (namespace =  AWS/OpsWorks) & (stat =  mean) & (StackId
      =  *);
  Oracle DB instance:
    dashboard_group: Oracle DB
    view_support: instance
    importQualifiers: oracledb.processes.usage (sf_key =  oracledb.instance.name)
      & (sf_key =  host.name);
  Oracle DB instances:
    dashboard_group: Oracle DB
    view_support: aggregated
    importQualifiers: oracledb.processes.usage (sf_key =  oracledb.instance.name)
      & (sf_key =  host.name);
  Oracle DB sessions:
    dashboard_group: Oracle DB
    view_support: instance
    importQualifiers: oracledb.processes.usage (sf_key =  oracledb.instance.name)
      & (sf_key =  host.name);
  Oracle summary:
    dashboard_group: Oracle DB
    view_support: N/A
    importQualifiers: oracledb.processes.usage (sf_key =  oracledb.instance.name)
      & (sf_key =  host.name);
  Overview:
    dashboard_group: AWS API Gateway
    view_support: N/A
    importQualifiers: Count (namespace =  AWS/ApiGateway);  OR Latency (namespace
      =  AWS/ApiGateway);  OR IntegrationLatency (namespace =  AWS/ApiGateway);  OR
      4XXError (namespace =  AWS/ApiGateway);  OR 5XXError (namespace =  AWS/ApiGateway);  OR
      CacheHitCount (namespace =  AWS/ApiGateway);  OR CacheMissCount (namespace =  AWS/ApiGateway);
  Overview - Conviva:
    dashboard_group: Conviva
    view_support: N/A
    importQualifiers: conviva.quality_metriclens.total_attempts (*);  OR conviva.attempts
      (*);
  Overview - GitLab:
    dashboard_group: GitLab
    view_support: aggregated
    importQualifiers: sidekiq_queue_size (host.name =  *);  OR sidekiq_queue_latency
      (host.name =  *);  OR grpc_server_handled_total (host.name =  *);  OR gitlab_workhorse_http_request_duration_seconds
      (host.name =  *);  OR nginx_vts_server_requests_total (host.name =  *);
  Overview - Hadoop HDFS:
    dashboard_group: Hadoop HDFS
    view_support: N/A
    importQualifiers: gauge.hadoop-datanode-fs-capacity (plugin =  GenericJMX);  OR
      gauge.hadoop-namenode-max-heap (plugin =  GenericJMX);
  Overview - MongoDB atlas:
    dashboard_group: MongoDB atlas
    view_support: N/A
    importQualifiers: connections.current (*);  OR opcounter.query (*);  OR mongodbatlas.process.connections
      (*);
  Overview - SAP HANA:
    dashboard_group: SAP HANA
    view_support: N/A
    importQualifiers: sap.hana.host.cpu.user (*);
  Overview - Traefik:
    dashboard_group: Traefik
    view_support: N/A
    importQualifiers: traefik_entrypoint_requests_total (*);
  Part 1:
    dashboard_group: Sample data
    view_support: N/A
    importQualifiers: demo.trans.count (*);
  Part 2:
    dashboard_group: Sample data
    view_support: N/A
    importQualifiers: demo.trans.count (*);
  Part 3:
    dashboard_group: Sample data
    view_support: N/A
    importQualifiers: demo.trans.count (*);
  PostgreSQL node:
    dashboard_group: PostgreSQL(Smart Agent)
    view_support: N/A
    importQualifiers: pg_numbackends (plugin =  postgresql);
  PostgreSQL nodes:
    dashboard_group: PostgreSQL(Smart Agent)
    view_support: N/A
    importQualifiers: pg_numbackends (plugin =  postgresql);
  PostgreSQL summary:
    dashboard_group: PostgreSQL(OTel)
    view_support: N/A
    importQualifiers: postgresql.backends (*);  OR postgresql.db_size (*);
  Processes:
    dashboard_group: MongoDB atlas
    view_support: N/A
    importQualifiers: connections.current (*);  OR opcounter.query (*);  OR mongodbatlas.process.connections
      (*);
  Producer:
    dashboard_group: Kafka
    view_support: instance
    importQualifiers: counter.kafka.produce.total-time.count (plugin =  GenericJMX);
  Producers:
    dashboard_group: Kafka
    view_support: aggregated
    importQualifiers: counter.kafka.produce.total-time.count (plugin =  GenericJMX);
  Pub/Sub overview:
    dashboard_group: Google Cloud PubSub
    view_support: N/A
    importQualifiers: subscription/backlog_bytes (service =  pubsub);  OR subscription/oldest_unacked_message_age
      (service =  pubsub);  OR topic/send_request_count (service =  pubsub);
  Pub/Sub subscription:
    dashboard_group: Google Cloud PubSub
    view_support: N/A
    importQualifiers: subscription/backlog_bytes (service =  pubsub);  OR subscription/oldest_unacked_message_age
      (service =  pubsub);  OR topic/send_request_count (service =  pubsub);
  Pub/Sub topic:
    dashboard_group: Google Cloud PubSub
    view_support: N/A
    importQualifiers: subscription/backlog_bytes (service =  pubsub);  OR subscription/oldest_unacked_message_age
      (service =  pubsub);  OR topic/send_request_count (service =  pubsub);
  Queries:
    dashboard_group: PostgreSQL (New)
    view_support: N/A
    importQualifiers: postgres_sessions (*);
  Queries - PostgreSQL(Smart Agent):
    dashboard_group: PostgreSQL(Smart Agent)
    view_support: N/A
    importQualifiers: pg_numbackends (plugin =  postgresql);
  Query:
    dashboard_group: PostgreSQL(Smart Agent)
    view_support: N/A
    importQualifiers: pg_numbackends (plugin =  postgresql);
  RDS MySQL and MariaDB logs:
    dashboard_group: AWS RDS
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/RDS) & (stat =  mean) & (DBInstanceIdentifier
      =  *);
  RDS instance:
    dashboard_group: AWS RDS
    view_support: instance
    importQualifiers: CPUUtilization (namespace =  AWS/RDS) & (stat =  mean) & (DBInstanceIdentifier
      =  *);
  RDS instances:
    dashboard_group: AWS RDS
    view_support: aggregated
    importQualifiers: CPUUtilization (namespace =  AWS/RDS) & (stat =  mean) & (DBInstanceIdentifier
      =  *);
  RUM:
    dashboard_group: Executive Level
    view_support: N/A
    importQualifiers: service.request.count (sf_environment =  *) & (sf_service =  *);  OR
      sf.org.numLogsReceivedByToken (*);  OR rum.page_view.count (*);  OR rum.page_view.count
      (sf_ua_browsername =  *);  OR sf.org.apm.numContainers (*);  OR synthetics.run.count
      (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent (test =  *)
      & (location =  *);
  RUM THROTTLING:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  RUM entitlements:
    dashboard_group: Organization metrics
    view_support: N/A
    importQualifiers: sf.org.subscription.customMetrics (*);
  RabbitMQ:
    dashboard_group: RabbitMQ
    view_support: aggregated
    importQualifiers: gauge.node.uptime (plugin =  rabbitmq);
  RabbitMQ node:
    dashboard_group: RabbitMQ
    view_support: instance
    importQualifiers: gauge.node.uptime (plugin =  rabbitmq);
  Redis instance:
    dashboard_group: Redis (OTel)
    view_support: instance
    importQualifiers: redis.cpu.time (host.name =  *);  OR redis.uptime (host.name
      =  *);
  Redis instance - Redis:
    dashboard_group: Redis
    view_support: instance
    importQualifiers: bytes.used_memory (plugin =  redis_info);
  Redis instances:
    dashboard_group: Redis (OTel)
    view_support: aggregated
    importQualifiers: redis.cpu.time (host.name =  *);  OR redis.uptime (host.name
      =  *);
  Redis instances - Redis:
    dashboard_group: Redis
    view_support: aggregated
    importQualifiers: bytes.used_memory (plugin =  redis_info);
  Replica sets:
    dashboard_group: MongoDB atlas
    view_support: N/A
    importQualifiers: connections.current (*);  OR opcounter.query (*);  OR mongodbatlas.process.connections
      (*);
  Resource manager:
    dashboard_group: Hadoop YARN
    view_support: N/A
    importQualifiers: gauge.hadoop.resource.manager.apps.progress (plugin =  apache_hadoop);  OR
      gauge.hadoop.cluster.metrics.apps_submitted (plugin =  apache_hadoop);
  Route 53:
    dashboard_group: AWS Route 53
    view_support: aggregated
    importQualifiers: HealthCheckStatus (namespace =  AWS/Route53) & (stat =  lower);
  Route 53 healthcheck:
    dashboard_group: AWS Route 53
    view_support: instance
    importQualifiers: HealthCheckStatus (namespace =  AWS/Route53) & (stat =  lower);
  Route objects:
    dashboard_group: Kong
    view_support: N/A
    importQualifiers: gauge.kong.database.reachable (plugin =  kong);
  Router:
    dashboard_group: Google Cloud Router
    view_support: instance
    importQualifiers: bgp/sent_routes_count (service =  router);  OR bgp/received_routes_count
      (service =  router);
  Router - Cloud foundry:
    dashboard_group: Cloud foundry
    view_support: N/A
    importQualifiers: system.cpu.sys (*);  OR rep.ContainerCount (*);
  Router - VMware Tanzu AS:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Router Overview:
    dashboard_group: Google Cloud Router
    view_support: aggregated
    importQualifiers: bgp/sent_routes_count (service =  router);  OR bgp/received_routes_count
      (service =  router);
  SNS:
    dashboard_group: AWS SNS
    view_support: aggregated
    importQualifiers: NumberOfMessagesPublished (namespace =  AWS/SNS) & (TopicName
      =  *) & (stat =  sum);
  SQL Server database:
    dashboard_group: SQL Server (OTel)
    view_support: instance
    importQualifiers: sqlserver.user.connection.count (sqlserver.instance.name =  *)
      & (host.name =  *);
  SQL Server databases:
    dashboard_group: SQL Server (OTel)
    view_support: aggregated
    importQualifiers: sqlserver.user.connection.count (sqlserver.instance.name =  *)
      & (host.name =  *);
  SQL Server instance:
    dashboard_group: SQL Server (OTel)
    view_support: instance
    importQualifiers: sqlserver.user.connection.count (sqlserver.instance.name =  *)
      & (host.name =  *);
  SQL Server instances:
    dashboard_group: SQL Server (OTel)
    view_support: aggregated
    importQualifiers: sqlserver.user.connection.count (sqlserver.instance.name =  *)
      & (host.name =  *);
  SQL server summary:
    dashboard_group: Microsoft SQL server
    view_support: N/A
    importQualifiers: sqlserver_server_properties.db_online (plugin =  telegraf-sqlserver);
  SQS queue:
    dashboard_group: AWS SQS
    view_support: instance
    importQualifiers: NumberOfMessagesSent (namespace =  AWS/SQS) & (stat =  sum);
  SQS queues:
    dashboard_group: AWS SQS
    view_support: aggregated
    importQualifiers: NumberOfMessagesSent (namespace =  AWS/SQS) & (stat =  sum);
  Sample charts:
    dashboard_group: Sample data
    view_support: N/A
    importQualifiers: demo.trans.count (*);
  Service:
    dashboard_group: APM services
    view_support: N/A
    importQualifiers: spans.count (sf_environment =  *);
  Service - APM .NET services:
    dashboard_group: APM .NET services
    view_support: N/A
    importQualifiers: process.runtime.dotnet.gc.heap.size (*);
  Service - APM Java services (OTel 2.x):
    dashboard_group: APM Java services (OTel 2.x)
    view_support: N/A
    importQualifiers: jvm.class.loaded (*);
  Service - APM NodeJS services:
    dashboard_group: APM NodeJS services
    view_support: N/A
    importQualifiers: nodejs.memory.heap.total (*);
  Service - APM java services:
    dashboard_group: APM java services
    view_support: N/A
    importQualifiers: runtime.jvm.classes.loaded (*);
  Service - SAP HANA:
    dashboard_group: SAP HANA
    view_support: N/A
    importQualifiers: sap.hana.host.cpu.user (*);
  "Service - \xB5APM PG":
    dashboard_group: "\xB5APM PG"
    view_support: N/A
    importQualifiers: spans.count (service =  *);
  Service Endpoint:
    dashboard_group: APM Java services (OTel 2.x)
    view_support: N/A
    importQualifiers: jvm.class.loaded (*);
  Service endpoint:
    dashboard_group: APM services
    view_support: N/A
    importQualifiers: spans.count (sf_environment =  *);
  Service endpoint - APM .NET services:
    dashboard_group: APM .NET services
    view_support: N/A
    importQualifiers: process.runtime.dotnet.gc.heap.size (*);
  Service endpoint - APM NodeJS services:
    dashboard_group: APM NodeJS services
    view_support: N/A
    importQualifiers: nodejs.memory.heap.total (*);
  Service endpoint - APM java services:
    dashboard_group: APM java services
    view_support: N/A
    importQualifiers: runtime.jvm.classes.loaded (*);
  "Service endpoint - \xB5APM PG":
    dashboard_group: "\xB5APM PG"
    view_support: N/A
    importQualifiers: spans.count (service =  *);
  Service limit:
    dashboard_group: AWS service limit
    view_support: N/A
    importQualifiers: ServiceLimitUsage (ServiceLimit =  *) & (ServiceName =  *);
  Service limit overview:
    dashboard_group: AWS service limit
    view_support: N/A
    importQualifiers: ServiceLimitUsage (ServiceLimit =  *) & (ServiceName =  *);
  Service objects:
    dashboard_group: Kong
    view_support: N/A
    importQualifiers: gauge.kong.database.reachable (plugin =  kong);
  Services:
    dashboard_group: Kong Gateway
    view_support: aggregated
    importQualifiers: kong_http_requests_total (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_request_latency_ms_sum (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_bandwidth_bytes (host.name =  *) & (route =  *) & (service =  *);  OR
      kong_memory_workers_lua_vms_bytes (host.name =  *);
  Shows:
    dashboard_group: Conviva
    view_support: N/A
    importQualifiers: conviva.quality_metriclens.total_attempts (*);  OR conviva.attempts
      (*);
  SignalFx Heroku collectors:
    dashboard_group: Heroku
    view_support: N/A
    importQualifiers: heroku.memory_quota (*);
  Snowflake cost:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake database:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake databases:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake overview:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake queries:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake query details:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake schemas:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake security:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake warehouse:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Snowflake warehouses:
    dashboard_group: Snowflake
    view_support: N/A
    importQualifiers: snowflake.query.executed (WAREHOUSE_NAME =  *);  OR snowflake.database.query.count
      (DATABASE_NAME =  *);
  Solr cluster:
    dashboard_group: Apache solr
    view_support: instance
    importQualifiers: counter.solr.http_requests (plugin =  solr);
  Solr clusters:
    dashboard_group: Apache solr
    view_support: aggregated
    importQualifiers: counter.solr.http_requests (plugin =  solr);
  Solr collection:
    dashboard_group: Apache solr
    view_support: instance
    importQualifiers: counter.solr.http_requests (plugin =  solr);
  Solr collections:
    dashboard_group: Apache solr
    view_support: aggregated
    importQualifiers: counter.solr.http_requests (plugin =  solr);
  Solr node:
    dashboard_group: Apache solr
    view_support: instance
    importQualifiers: counter.solr.http_requests (plugin =  solr);
  Solr nodes:
    dashboard_group: Apache solr
    view_support: aggregated
    importQualifiers: counter.solr.http_requests (plugin =  solr);
  Spanner instance:
    dashboard_group: Google Cloud Spanner
    view_support: instance
    importQualifiers: instance/cpu/utilization (service =  spanner);  OR api/sent_bytes_count
      (service =  spanner);
  Spanner overview:
    dashboard_group: Google Cloud Spanner
    view_support: aggregated
    importQualifiers: instance/cpu/utilization (service =  spanner);  OR api/sent_bytes_count
      (service =  spanner);
  Spark leader process:
    dashboard_group: Apache spark admin
    view_support: N/A
    importQualifiers: gauge.master.apps (plugin =  apache_spark);
  Spark overview:
    dashboard_group: Apache spark admin
    view_support: N/A
    importQualifiers: gauge.master.apps (plugin =  apache_spark);
  Spark worker process:
    dashboard_group: Apache spark admin
    view_support: N/A
    importQualifiers: gauge.master.apps (plugin =  apache_spark);
  Spring boot host:
    dashboard_group: Spring boot
    view_support: N/A
    importQualifiers: http.server.requests.count (agent =  micrometer);
  Spring boot overview:
    dashboard_group: Spring boot
    view_support: N/A
    importQualifiers: http.server.requests.count (agent =  micrometer);
  Statements:
    dashboard_group: SAP HANA
    view_support: N/A
    importQualifiers: sap.hana.host.cpu.user (*);
  Synthetic usage:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  Synthetics org metrics:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  Synthetics overview:
    dashboard_group: Executive Level
    view_support: N/A
    importQualifiers: service.request.count (sf_environment =  *) & (sf_service =  *);  OR
      sf.org.numLogsReceivedByToken (*);  OR rum.page_view.count (*);  OR rum.page_view.count
      (sf_ua_browsername =  *);  OR sf.org.apm.numContainers (*);  OR synthetics.run.count
      (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent (test =  *)
      & (location =  *);
  System Overview:
    dashboard_group: PostgreSQL (New)
    view_support: N/A
    importQualifiers: postgres_sessions (*);
  System overview:
    dashboard_group: PostgreSQL(Smart Agent)
    view_support: N/A
    importQualifiers: pg_numbackends (plugin =  postgresql);
  TCP:
    dashboard_group: Network explorer dashboards
    view_support: instance
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  TCP - Outbound:
    dashboard_group: Network explorer dashboards
    view_support: instance
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  TCP overview:
    dashboard_group: Network explorer dashboards
    view_support: aggregated
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  Table:
    dashboard_group: PostgreSQL (New)
    view_support: N/A
    importQualifiers: postgres_sessions (*);
  Tables:
    dashboard_group: SAP HANA
    view_support: N/A
    importQualifiers: sap.hana.host.cpu.user (*);
  Tanzu AS host:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Tanzu AS overview:
    dashboard_group: VMware Tanzu AS
    view_support: N/A
    importQualifiers: system_metrics_agent.system_cpu_sys (*);  OR rep.ContainerCount
      (*);
  Telegraf:
    dashboard_group: Infrastructure (Telegraf)
    view_support: N/A
    importQualifiers: mem.free (plugin =  mem) & (agent =  telegraf);
  Telegraf (a):
    dashboard_group: Infrastructure (Telegraf)
    view_support: N/A
    importQualifiers: mem.free (plugin =  mem) & (agent =  telegraf);
  Tenant:
    dashboard_group: OpenStack
    view_support: N/A
    importQualifiers: gauge.openstack.nova.hypervisor.vcpus (plugin =  openstack);
  Test trends:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  Token usage:
    dashboard_group: Executive Level
    view_support: N/A
    importQualifiers: service.request.count (sf_environment =  *) & (sf_service =  *);  OR
      sf.org.numLogsReceivedByToken (*);  OR rum.page_view.count (*);  OR rum.page_view.count
      (sf_ua_browsername =  *);  OR sf.org.apm.numContainers (*);  OR synthetics.run.count
      (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent (test =  *)
      & (location =  *);
  Topic:
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  Topics:
    dashboard_group: Amazon MSK
    view_support: N/A
    importQualifiers: ActiveControllerCount (namespace =  AWS/Kafka) & (stat =  sum)
      & (Cluster_Name =  *);  OR GlobalPartitionCount (namespace =  AWS/Kafka) & (stat
      =  sum) & (Cluster_Name =  *);
  UDP:
    dashboard_group: Network explorer dashboards
    view_support: instance
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  UDP - Outbound:
    dashboard_group: Network explorer dashboards
    view_support: instance
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  UDP overview:
    dashboard_group: Network explorer dashboards
    view_support: aggregated
    importQualifiers: tcp.bytes (source.workload.name =  *);  OR tcp.bytes (dest.workload.name
      =  *);
  Uptime (HTTP/Port) test:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  Uptime (HTTP/Port) test org:
    dashboard_group: Synthetic Monitoring
    view_support: N/A
    importQualifiers: synthetics.run.count (test_type =  *) & (test =  *);  OR synthetics.run.uptime.percent
      (test =  *) & (location =  *);
  Userpool:
    dashboard_group: AWS Cognito
    view_support: instance
    importQualifiers: SignUpSuccesses (namespace =  AWS/Cognito) & (stat =  count)
      & (UserPool =  *);  OR SignInSuccesses (namespace =  AWS/Cognito) & (stat =  count)
      & (UserPool =  *);
  Userpools:
    dashboard_group: AWS Cognito
    view_support: aggregated
    importQualifiers: SignUpSuccesses (namespace =  AWS/Cognito) & (stat =  count)
      & (UserPool =  *);  OR SignInSuccesses (namespace =  AWS/Cognito) & (stat =  count)
      & (UserPool =  *);
  VM:
    dashboard_group: vSphere (legacy)
    view_support: N/A
    importQualifiers: cpu.usage.average (metric_source =  vsphere);  OR mem.usage.average
      (metric_source =  vsphere);
  VM - vSphere:
    dashboard_group: vSphere
    view_support: instance
    importQualifiers: vsphere.cpu_usage_percent (*);
  VM logs:
    dashboard_group: vSphere
    view_support: N/A
    importQualifiers: vsphere.cpu_usage_percent (*);
  VMs:
    dashboard_group: vSphere (legacy)
    view_support: N/A
    importQualifiers: cpu.usage.average (metric_source =  vsphere);  OR mem.usage.average
      (metric_source =  vsphere);
  VMs - vSphere:
    dashboard_group: vSphere
    view_support: aggregated
    importQualifiers: vsphere.cpu_usage_percent (*);
  Varnish:
    dashboard_group: Varnish
    view_support: N/A
    importQualifiers: uptime.client_uptime (plugin =  varnish);
  Varnish overview:
    dashboard_group: Varnish
    view_support: N/A
    importQualifiers: uptime.client_uptime (plugin =  varnish);
  Windows host:
    dashboard_group: PerfCounterReporter (deprecated)
    view_support: N/A
    importQualifiers: processor.pct_processor_time (sf_key =  host);
  Windows overview:
    dashboard_group: PerfCounterReporter (deprecated)
    view_support: N/A
    importQualifiers: processor.pct_processor_time (sf_key =  host);
  Workflow details:
    dashboard_group: APM Business Workflows
    view_support: N/A
    importQualifiers: workflows.count (sf_environment =  *);
  Workflows overview:
    dashboard_group: APM Business Workflows
    view_support: N/A
    importQualifiers: workflows.count (sf_environment =  *);
  Zookeeper node:
    dashboard_group: Zookeeper
    view_support: instance
    importQualifiers: gauge.zk_max_file_descriptor_count (plugin =  zookeeper);
  Zookeeper nodes:
    dashboard_group: Zookeeper
    view_support: aggregated
    importQualifiers: gauge.zk_max_file_descriptor_count (plugin =  zookeeper);
  etcd cluster:
    dashboard_group: etcd
    view_support: N/A
    importQualifiers: counter.etcd.leader.counts.success (plugin =  etcd);
  etcd instance:
    dashboard_group: etcd
    view_support: N/A
    importQualifiers: counter.etcd.leader.counts.success (plugin =  etcd);
  etcd instances:
    dashboard_group: etcd
    view_support: N/A
    importQualifiers: counter.etcd.leader.counts.success (plugin =  etcd);
  k8s replicaset:
    dashboard_group: Kubernetes - Workloads
    view_support: instance
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  k8s replicasets:
    dashboard_group: Kubernetes - Workloads
    view_support: aggregated
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.statefulset.current_pods (k8s.statefulset.name
      =  *) & (k8s.cluster.name =  *);  OR k8s.job.active_pods (k8s.job.name =  *)
      & (k8s.cluster.name =  *);  OR k8s.cronjob.active_jobs (k8s.cronjob.name =  *)
      & (k8s.cluster.name =  *);
  vCenter:
    dashboard_group: vSphere (legacy)
    view_support: N/A
    importQualifiers: cpu.usage.average (metric_source =  vsphere);  OR mem.usage.average
      (metric_source =  vsphere);
  vCenter - vSphere:
    dashboard_group: vSphere
    view_support: instance
    importQualifiers: vsphere.cpu_usage_percent (*);
  vCenter logs:
    dashboard_group: vSphere
    view_support: N/A
    importQualifiers: vsphere.cpu_usage_percent (*);
  vCenters:
    dashboard_group: vSphere
    view_support: aggregated
    importQualifiers: vsphere.cpu_usage_percent (*);
