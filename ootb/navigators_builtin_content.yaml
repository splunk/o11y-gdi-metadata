Navigators:
  ALB instances:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - AWS ALB instances
      instance:
      - AWS ALB instance
    importQualifiers: HealthyHostCount (namespace =  AWS/ApplicationELB) & (LoadBalancer
      =  *);
  AWS Bedrock:
    category_display_name: AI Frameworks
    associated_dashboards:
      aggregated:
      - AWS Bedrock Aggregate
      instance:
      - AWS Bedrock Instance
    importQualifiers: InputTokenCount (sf_key =  AWSUniqueId) & (namespace =  AWS/Bedrock);
  Apache Solr cluster:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Solr clusters
      instance:
      - Solr cluster
    importQualifiers: counter.solr.http_requests (plugin =  solr) & (_exists_ =  cluster);
  Apache Solr collection:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Solr collections
      instance:
      - Solr collection
    importQualifiers: counter.solr.http_requests (plugin =  solr) & (_exists_ =  collection);
  Apache Solr node:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Solr nodes
      instance:
      - Solr node
    importQualifiers: counter.solr.http_requests (plugin =  solr);
  Apache web servers:
    category_display_name: Web Servers
    associated_dashboards:
      aggregated:
      - Apache web servers
      instance:
      - Apache web server
    importQualifiers: apache_bytes (sf_key =  host);
  Apache web servers (OTel):
    category_display_name: Web Servers
    associated_dashboards:
      aggregated:
      - Apache web servers
      instance:
      - Apache web server
    importQualifiers: apache.requests (host.name =  *);
  App engine:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - App Engine flex
      - App Engine HTTP
      - App Engine memcache
      - App Engine system
      instance:
      - App Engine flex
      - App Engine HTTP
      - App Engine memcache
      - App Engine system
    importQualifiers: http/server/response_count (sf_key =  gcp_id) & (sf_key =  version_id);
  App services:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure App services
      instance:
      - Azure App service
    importQualifiers: CpuTime (is_Azure_Function =  false) & (resource_type =  Microsoft.Web/sites)
      & (primary_aggregation_type =  true);  OR BytesReceived (is_Azure_Function =  false)
      & (resource_type =  Microsoft.Web/sites) & (primary_aggregation_type =  true);
  Autoscaling groups:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - AWS AutoScaling groups
      instance:
      - AWS AutoScaling group
    importQualifiers: GroupTotalInstances (stat =  mean) & (namespace =  AWS/AutoScaling);
  Azure Functions (SignalFx Wrapper):
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - (SignalFx) Azure Functions (deprecated)
      instance:
      - (SignalFx) Azure Function (deprecated)
    importQualifiers: azure.function.invocations (sf_key =  azure_function_name);  OR
      azure.function.errors (sf_key =  azure_function_name);  OR azure.function.duration
      (sf_key =  azure_function_name);
  Azure functions:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - (Azure) Function Apps
      instance:
      - (Azure) Function App
    importQualifiers: FunctionExecutionCount (is_Azure_Function =  true) & (primary_aggregation_type
      =  true) & (resource_type =  Microsoft.Web/sites);  OR FunctionExecutionUnits
      (is_Azure_Function =  true) & (primary_aggregation_type =  true) & (resource_type
      =  Microsoft.Web/sites);
  Batch accounts:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure batch accounts
      - Azure batch account logs
      instance:
      - Azure batch account
    importQualifiers: CoreCount (resource_type =  Microsoft.Batch/batchAccounts) &
      (primary_aggregation_type =  true);
  Cloud BigQuery:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - BigQuery overview
      instance:
      - BigQuery
    importQualifiers: query/count (service =  bigquery) & (project_id =  *);  OR job/num_in_flight
      (service =  bigquery) & (project_id =  *);
  Cloud bigtable:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Bigtable overview
      instance:
      - Bigtable cluster
      - Bigtable table
    importQualifiers: cluster/cpu_load (sf_key =  gcp_id);
  Cloud datastore:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Datastore overview
      instance:
      - Datastore
    importQualifiers: entity/read_sizes (service =  datastore) & (monitored_resource
      =  datastore_request) & (project_id =  *);  OR api/request_count (service =  datastore)
      & (monitored_resource =  datastore_request) & (project_id =  *);
  Cloud functions:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - GCF (stackdriver) overview
      instance:
      - GCF (stackdriver) function
    importQualifiers: function/execution_count (sf_key =  function_name);  OR function/user_memory_bytes
      (sf_key =  function_name);  OR function/execution_times (sf_key =  function_name);
  Cloud router:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Router Overview
      instance:
      - Router
    importQualifiers: bgp/sent_routes_count (service =  router);  OR bgp/received_routes_count
      (service =  router);
  Cloud spanner:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Spanner overview
      instance:
      - Spanner instance
    importQualifiers: instance/cpu/utilization (sf_key =  gcp_id) & (service =  spanner);
  Cloud storage:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Cloud Storage overview
      instance:
      - Cloud Storage bucket
    importQualifiers: network/received_bytes_count (sf_key =  gcp_id);
  CloudFront distributions:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - CloudFront distributions
      instance:
      - CloudFront distribution
    importQualifiers: Requests (sf_key =  DistributionId);
  Cognito:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - Userpools
      instance:
      - Userpool
    importQualifiers: SignUpSuccesses (namespace =  AWS/Cognito) & (stat =  count)
      & (UserPool =  *);  OR SignInSuccesses (namespace =  AWS/Cognito) & (stat =  count)
      & (UserPool =  *);
  Compute engine:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Compute Engine instances
      - Compute Engine instances (StackDriver)
      instance:
      - Compute Engine instance
      - Compute Engine instance (StackDriver)
    importQualifiers: instance/cpu/utilization (service =  compute) & (sf_key =  gcp_id);  OR
      system.memory.usage (cloud.provider =  gcp);
  Container engine:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Container Engine
      instance:
      - Container Engine pod
      - Container Engine container
    importQualifiers: container/cpu/usage_time (sf_key =  gcp_id);
  Couchbase buckets:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Couchbase buckets
      instance:
      - Couchbase bucket
    importQualifiers: gauge.bucket.basic.diskUsed (plugin =  couchbase) & (sf_key
      =  bucket);
  Couchbase cluster:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Couchbase clusters
      instance:
      - Couchbase cluster
    importQualifiers: gauge.nodes.system.cpu_utilization_rate (plugin =  couchbase)
      & (sf_key =  cluster);
  Couchbase nodes:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Couchbase nodes
      instance:
      - Couchbase node
    importQualifiers: gauge.nodes.system.cpu_utilization_rate (plugin =  couchbase)
      & (sf_key =  node);
  DocumentDB clusters:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - DocumentDB clusters
      instance:
      - DocumentDB cluster
    importQualifiers: CPUUtilization (namespace =  AWS/DocDB) & (stat =  mean);
  DynamoDB:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - AWS DynamoDB
      instance:
      - AWS DynamoDB
    importQualifiers: SuccessfulRequestLatency (sf_key =  TableName);
  EBS:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - EBS volumes
      instance:
      - EBS volume
    importQualifiers: VolumeWriteOps (sf_key =  VolumeId);
  EC2:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - EC2 instances
      instance:
      - EC2 instance
    importQualifiers: CPUUtilization (sf_key =  InstanceId);  OR system.memory.usage
      (cloud.provider =  aws);
  ECS:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - ECS (AWS)
      instance:
      - ECS (AWS) cluster
    importQualifiers: CPUUtilization (sf_key =  ClusterName);
  ELB:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - ELB instances
      - ELB logs
      instance:
      - ELB instance
    importQualifiers: RequestCount (sf_key =  LoadBalancerName);
  ElastiCache:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - ElastiCache
      - ElastiCache cluster
      instance:
      - ElastiCache node
    importQualifiers: CurrConnections (sf_key =  CacheNodeId);
  Elastic pools:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Elastic pools
      instance:
      - Elastic pool
    importQualifiers: eDTU_used (resource_type =  Microsoft.Sql/servers/elasticpools)
      & (primary_aggregation_type =  true);  OR eDTU_limit (resource_type =  Microsoft.Sql/servers/elasticpools)
      & (primary_aggregation_type =  true);  OR dtu_consumption_percent (resource_type
      =  Microsoft.Sql/servers/elasticpools) & (primary_aggregation_type =  true);
  Elasticsearch clusters:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Elasticsearch clusters
      instance:
      - Elasticsearch cluster
    importQualifiers: counter.indices.indexing.index-total (plugin =  elasticsearch);  OR
      elasticsearch.indices.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch indexes:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Elasticsearch indexes
      instance:
      - Elasticsearch index
    importQualifiers: counter.indices.total.indexing.index-total (plugin =  elasticsearch);
  Elasticsearch nodes:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Elasticsearch nodes
      instance:
      - Elasticsearch node
    importQualifiers: counter.indices.indexing.index-total (plugin =  elasticsearch);  OR
      elasticsearch.indices.indexing.index-total (plugin =  elasticsearch);
  Envoy clusters:
    category_display_name: Messaging
    associated_dashboards:
      aggregated:
      - Envoy clusters
      instance:
      - Envoy cluster
    importQualifiers: envoy_cluster_upstream_cx_total (cluster_name =  *);
  Envoy listeners:
    category_display_name: Messaging
    associated_dashboards:
      aggregated:
      - Envoy listeners
      instance:
      - Envoy listener
    importQualifiers: envoy_listener_downstream_cx_total (cluster_name =  *);
  Event hubs:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure Event Hubs
      - Azure Event Hubs logs
      instance:
      - Azure Event Hub
    importQualifiers: SuccessfulRequests (primary_aggregation_type =  true) & (resource_type
      =  Microsoft.EventHub/namespaces);  OR IncomingRequests (primary_aggregation_type
      =  true) & (resource_type =  Microsoft.EventHub/namespaces);
  GKE clusters:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - Cluster overview
      instance:
      - GKE node
      - GKE pod
    importQualifiers: container/memory/request_utilization (service =  kubernetes);
  GKE nodes:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - GKE node
      instance:
      - GKE node
    importQualifiers: container/memory/request_utilization (service =  kubernetes);
  GKE pods:
    category_display_name: Google Cloud Platform
    associated_dashboards:
      aggregated:
      - GKE pod
      instance:
      - GKE pod
    importQualifiers: container/memory/request_utilization (service =  kubernetes);
  GitLab:
    category_display_name: CI/CD
    associated_dashboards:
      aggregated:
      - Overview
      instance:
      - Gitlab
      - Embedded NGINX
    importQualifiers: sidekiq_queue_size (host.name =  *);  OR sidekiq_queue_latency
      (host.name =  *);  OR gitlab_workhorse_http_request_duration_seconds (host.name
      =  *);  OR nginx_vts_server_requests_total (host.name =  *);
  Hosts:
    category_display_name: My Data Center
    associated_dashboards:
      aggregated:
      - Hosts
      instance:
      - Host
    importQualifiers: system.memory.usage (sf_key =  host) & (sf_key !=  gcp_id) &
      (sf_key !=  azure_resource_id) & (sf_key !=  cloud.provider) & (sf_key !=  AWSUniqueId);
  JMX (collectd):
    category_display_name: Others
    associated_dashboards:
      aggregated:
      - Java processes
      instance:
      - Java process
    importQualifiers: gauge.loaded_classes (plugin =  GenericJMX);
  Kafka brokers:
    category_display_name: Messaging
    associated_dashboards:
      aggregated:
      - Brokers
      instance:
      - Broker
    importQualifiers: counter.kafka-bytes-out (*);
  Kafka brokers (OTel):
    category_display_name: Messaging
    associated_dashboards:
      aggregated:
      - Brokers
      instance:
      - Broker
    importQualifiers: kafka.brokers (host.name =  *);  OR kafka.topic.partitions (host.name
      =  *) & (topic =  *) & (partition =  *);
  Kafka consumers:
    category_display_name: Messaging
    associated_dashboards:
      aggregated:
      - Consumers
      instance:
      - Consumer
    importQualifiers: gauge.kafka.consumer.records-lag-max (*);
  Kafka producers:
    category_display_name: Messaging
    associated_dashboards:
      aggregated:
      - Producers
      instance:
      - Producer
    importQualifiers: gauge.kafka.producer.response-rate (hostHasService =  kafka_producer);
  Kinesis analytics:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - Kinesis Analytics overview
      instance:
      - Kinesis Analytics
    importQualifiers: Bytes (namespace =  AWS/KinesisAnalytics);
  Kinesis streams:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - Kinesis Streams overview
      instance:
      - Kinesis Stream
    importQualifiers: GetRecords.Latency (namespace =  AWS/Kinesis);
  Kong Gateway:
    category_display_name: Others
    associated_dashboards:
      aggregated:
      - Kong hosts
      - Services
      instance:
      - Kong host
    importQualifiers: kong_http_requests_total (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_request_latency_ms_sum (host.name =  *) & (route =  *) & (service
      =  *);  OR kong_bandwidth_bytes (host.name =  *) & (route =  *) & (service =  *);  OR
      kong_memory_workers_lua_vms_bytes (host.name =  *);
  Kubernetes clusters:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s clusters
      instance:
      - K8s cluster
    importQualifiers: container_cpu_utilization (sf_key =  k8s.cluster.name);  OR
      container.cpu.time (sf_key =  k8s.cluster.name);
  Kubernetes containers:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s containers
      instance:
      - K8s container
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);
  Kubernetes cronjobs:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s cronjobs
      instance:
      - K8s cronjob
    importQualifiers: k8s.cronjob.active_jobs (k8s.cronjob.name =  *) & (k8s.cluster.name
      =  *);
  Kubernetes daemonsets:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s Daemonsets
      instance:
      - K8s Daemonset
    importQualifiers: k8s.daemonset.current_scheduled_nodes (k8s.daemonsets.name =  *)
      & (k8s.node.name =  *);  OR k8s.daemonset.desired_scheduled_nodes (k8s.daemonset.name
      =  *) & (k8s.cluster.name =  *);
  Kubernetes deployments:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s deployments
      instance:
      - K8s deployment
    importQualifiers: k8s.deployment.available (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.deployment.desired (k8s.deployment.name =  *) & (k8s.cluster.name
      =  *);
  Kubernetes jobs:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s jobs
      instance:
      - K8s job
    importQualifiers: k8s.job.active_pods (k8s.job.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.job.desired_successful_pods (k8s.job.name =  *) & (k8s.cluster.name
      =  *);
  Kubernetes namespaces:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s namespaces
      instance:
      - K8s namespace
    importQualifiers: k8s.namespace.phase (sf_key =  k8s.namespace.name);
  Kubernetes nodes:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s nodes
      - K8s clusters
      - K8s node logs
      instance:
      - K8s node
      - K8s pods
      - K8s node logs
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);
  Kubernetes pods:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s pods
      instance:
      - K8s pod
      - K8s containers
      - K8s pod logs
    importQualifiers: k8s.node.condition_ready (sf_key =  k8s.node.name);
  Kubernetes replicasets:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - k8s replicasets
      instance:
      - k8s replicaset
    importQualifiers: k8s.replicaset.available (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.replicaset.desired (k8s.replicaset.name =  *) & (k8s.cluster.name
      =  *);
  Kubernetes statefulsets:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s statefulsets
      instance:
      - K8s statefulset
    importQualifiers: k8s.statefulset.current_pods (k8s.statefulset.name =  *) & (k8s.cluster.name
      =  *);  OR k8s.statefulset.desired_pods (k8s.statefulset.name =  *) & (k8s.cluster.name
      =  *);
  Kubernetes workloads:
    category_display_name: Kubernetes
    associated_dashboards:
      aggregated:
      - K8s workloads
      instance:
      - K8s workload
      - K8s pods
    importQualifiers: k8s.pod.phase (sf_key =  k8s.workload.name);  OR kubernetes.pod_phase
      (sf_key =  kubernetes_workload_name);
  Lambda functions:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - Lambda (AWS) overview
      - Lambda logs
      instance:
      - Lambda (AWS) function
    importQualifiers: Invocations (sf_key =  FunctionName);  OR Errors (sf_key =  FunctionName);  OR
      Throttles (sf_key =  FunctionName);  OR function.invocations (sf_key =  aws_function_name);
  Lambda functions (OTel):
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - Lambda functions
      instance:
      - Lambda function
    importQualifiers: lambda.function.lifetime (aws_function_name =  *) & (AWSUniqueId
      =  *);  OR lambda.function.invocation (aws_function_name =  *) & (AWSUniqueId
      =  *);
  LangChain:
    category_display_name: AI Frameworks
    associated_dashboards:
      aggregated:
      - LangChains
      instance:
      - LangChain
    importQualifiers: gen_ai.total.requests (gen_ai.system =  langchain);
  Logic apps:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure Logic Apps
      instance:
      - Azure Logic App
    importQualifiers: TotalBillableExecutions (resource_type =  Microsoft.Logic/workflows);
  Microsoft SQL databases:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Microsoft SQL databases
      instance:
      - Microsoft SQL database
    importQualifiers: sqlserver_server_properties.db_online (plugin =  telegraf-sqlserver);
  Microsoft SQL instances:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Microsoft SQL instances
      instance:
      - Microsoft SQL instance
    importQualifiers: sqlserver_server_properties.db_online (plugin =  telegraf-sqlserver);
  MongoDB clusters:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - MongoDB clusters
      instance:
      - MongoDB cluster
    importQualifiers: counter.network.numRequests (sf_key =  cluster) & (plugin =  mongo);
  MongoDB hosts:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - MongoDB hosts
      instance:
      - MongoDB host
    importQualifiers: counter.network.numRequests (plugin =  mongo);
  MongoDB instances (OTel):
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Instances
      instance:
      - Instance
    importQualifiers: mongodb.storage.size (server.address =  *);  OR mongodb.memory.usage
      (server.address =  *) & (database =  *);
  MySQL flexible server:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Flexibleserver overview
      instance:
      - Flexibleserver
    importQualifiers: cpu_percent (resource_type =  Microsoft.DBforMySQL/flexibleServers)
      & (primary_aggregation_type =  true);  OR active_connections (resource_type
      =  Microsoft.DBforMySQL/flexibleServers) & (primary_aggregation_type =  true);
  MySQL hosts:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - MySQL hosts
      instance:
      - MySQL host
    importQualifiers: threads.connected (plugin =  mysql);
  MySQL hosts (OTel):
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Hosts
      instance:
      - Host
    importQualifiers: mysql.operations (operation =  *) & (host.name =  *);  OR mysql.commands
      (host.name =  *) & (command =  *);
  NGINX servers:
    category_display_name: Web Servers
    associated_dashboards:
      aggregated:
      - NGINX servers
      instance:
      - NGINX server
    importQualifiers: nginx_connections.active (sf_key =  host);
  Network edges:
    category_display_name: Network Explorer
    associated_dashboards:
      aggregated:
      - TCP overview
      - UDP overview
      - DNS overview
      - HTTP overview
      instance:
      - TCP
      - HTTP
      - UDP
    importQualifiers: tcp.bytes (source.workload.name =  *) & (dest.workload.name
      =  *);
  Network workloads:
    category_display_name: Network Explorer
    associated_dashboards:
      aggregated:
      - TCP overview
      - UDP overview
      - DNS overview
      - HTTP overview
      instance:
      - TCP - Outbound
      - UDP - Outbound
      - DNS
      - HTTP - Outbound
    importQualifiers: tcp.bytes (source.workload.name =  *);
  Nvidia GPU:
    category_display_name: AI Frameworks
    associated_dashboards:
      aggregated:
      - GPU health
      - GPU performance
      instance:
      - GPU usage
    importQualifiers: DCGM_FI_DEV_GPU_UTIL (sf_key =  gpu) & (sf_key =  UUID);
  OpenAI:
    category_display_name: AI Frameworks
    associated_dashboards:
      aggregated:
      - OpenAIs
      instance:
      - OpenAI
    importQualifiers: gen_ai.client.token.usage (*);
  OpenSearch domains:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - OpenSearch Domains
      instance:
      - OpenSearch Domain
    importQualifiers: ClusterStatus.green (namespace =  AWS/ES) & (stat =  upper);  OR
      Nodes (namespace =  AWS/ES) & (stat =  upper);
  OpsWorks:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - OpsWorks overview
      instance:
      - OpsWorks
    importQualifiers: cpu_idle (namespace =  AWS/OpsWorks) & (stat =  mean) & (StackId
      =  *);
  Oracle DB instances:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Oracle DB instances
      instance:
      - Oracle DB instance
      - Oracle DB sessions
    importQualifiers: oracledb.processes.usage (sf_key =  oracledb.instance.name)
      & (sf_key =  host.name);
  PostgreSQL databases:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Databases
      instance:
      - Database
    importQualifiers: postgresql.backends (*);  OR postgresql.db_size (*);
  PostgreSQL flexible server:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Flexibleserver overview
      instance:
      - Flexibleserver
    importQualifiers: cpu_percent (resource_type =  Microsoft.DBforPostgreSQL/flexibleServers)
      & (azure_resource_name =  *);  OR active_connections (resource_type =  Microsoft.DBforPostgreSQL/flexibleServers)
      & (azure_resource_name =  *);
  PostgreSQL hosts:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Hosts
      instance:
      - Host
    importQualifiers: postgresql.backends (*);  OR postgresql.db_size (*);
  RDS:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - RDS instances
      - RDS MySQL and MariaDB logs
      instance:
      - RDS instance
      - Engine specifics
    importQualifiers: DatabaseConnections (sf_key =  DBInstanceIdentifier);
  RabbitMQ nodes:
    category_display_name: Messaging
    associated_dashboards:
      aggregated:
      - RabbitMQ
      instance:
      - RabbitMQ node
    importQualifiers: gauge.node.uptime (plugin =  rabbitmq);
  Redis cache:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure redis caches
      instance:
      - Azure redis cache
    importQualifiers: cachehits (resource_type =  Microsoft.Cache/Redis);
  Redis instances:
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Redis instances
      instance:
      - Redis instance
    importQualifiers: bytes.used_memory (plugin =  redis_info);
  Redis instances (OTel):
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - Redis instances
      instance:
      - Redis instance
    importQualifiers: redis.cpu.time (host.name =  *);  OR redis.uptime (host.name
      =  *);
  Redshift:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - AWS Redshift overview
      - AWS Redshift logs
      instance:
      - AWS Redshift
    importQualifiers: CPUUtilization (namespace =  AWS/Redshift);
  Route53:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - Route 53
      instance:
      - Route 53 healthcheck
    importQualifiers: HealthCheckStatus (namespace =  AWS/Route53) & (stat =  lower);
  S3 buckets:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - AWS S3 buckets
      instance:
      - AWS S3 bucket
    importQualifiers: BytesUploaded (namespace =  AWS/S3);  OR BytesDownloaded (namespace
      =  AWS/S3);
  SNS topics:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - SNS
      instance:
      - SNS
    importQualifiers: NumberOfMessagesPublished (sf_key =  TopicName);
  SQL Server databases (OTel):
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - SQL Server databases
      instance:
      - SQL Server database
    importQualifiers: sqlserver.user.connection.count (sqlserver.instance.name =  *)
      & (host.name =  *);
  SQL Server instances (OTel):
    category_display_name: Datastores
    associated_dashboards:
      aggregated:
      - SQL Server instances
      instance:
      - SQL Server instance
    importQualifiers: sqlserver.user.connection.count (sqlserver.instance.name =  *)
      & (host.name =  *);
  SQL database:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure SQL databases
      instance:
      - Azure SQL database
    importQualifiers: dtu_consumption_percent (resource_type =  Microsoft.Sql/servers/databases);
  SQS queues:
    category_display_name: Amazon Web Services
    associated_dashboards:
      aggregated:
      - SQS queues
      instance:
      - SQS queue
    importQualifiers: NumberOfMessagesSent (sf_key =  QueueName);
  Storage:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure Storage accounts
      instance:
      - Azure Storage account
    importQualifiers: Ingress (resource_type =  Microsoft.Storage/storageAccounts);
  Traefik backends:
    category_display_name: Others
    associated_dashboards:
      aggregated:
      - Backends
      instance:
      - Backend
    importQualifiers: traefik_backend_requests_total (sf_key =  backend);
  Traefik entrypoints:
    category_display_name: Others
    associated_dashboards:
      aggregated:
      - EntryPoints
      instance:
      - EntryPoint
    importQualifiers: traefik_entrypoint_requests_total (sf_key =  entrypoint);
  VM scale sets:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure VM Scale Sets
      - Azure VM Scale Sets logs
      instance:
      - Azure VM Scale Set
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachineScaleSets)
      & (primary_aggregation_type =  true);
  Virtual machines:
    category_display_name: Microsoft Azure
    associated_dashboards:
      aggregated:
      - Azure Virtual Machines
      - Azure Virtual Machines logs
      instance:
      - Azure Virtual Machine
    importQualifiers: Percentage CPU (resource_type =  Microsoft.Compute/virtualMachines);  OR
      system.memory.usage (cloud.provider =  azure);  OR Percentage CPU (resource_type
      =  Microsoft.Compute/virtualMachineScaleSets/virtualMachines);
  Weaviate:
    category_display_name: AI Frameworks
    associated_dashboards:
      aggregated:
      - Hosts
      instance:
      - Host
    importQualifiers: object_count (*);
  Windows IIS servers:
    category_display_name: Web Servers
    associated_dashboards:
      aggregated:
      - IIS servers
      instance:
      - IIS server
    importQualifiers: web_service.total_method_requests_sec (*);
  ZooKeeper:
    category_display_name: Configuration
    associated_dashboards:
      aggregated:
      - Zookeeper nodes
      instance:
      - Zookeeper node
    importQualifiers: gauge.zk_max_file_descriptor_count (plugin =  zookeeper);
  vSphere VMs:
    category_display_name: Virtualization
    associated_dashboards:
      aggregated:
      - VMs
      instance:
      - VM
    importQualifiers: vsphere.cpu_usage_percent (sf_key =  vm_ip);
  vSphere hosts:
    category_display_name: Virtualization
    associated_dashboards:
      aggregated:
      - ESX-Hosts
      instance:
      - ESX-Host
    importQualifiers: vsphere.cpu_usage_percent (sf_key =  esx_ip);
  vSphere vCenter:
    category_display_name: Virtualization
    associated_dashboards:
      aggregated:
      - vCenters
      instance:
      - vCenter
    importQualifiers: vsphere.cpu_usage_percent (sf_key =  datacenter);
